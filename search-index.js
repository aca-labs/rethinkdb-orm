crystal_doc_search_index_callback({"repository_name":"rethinkdb-orm","body":"# RethinkDB ORM for Crystal Lang\n\n[![CI](https://github.com/spider-gazelle/rethinkdb-orm/actions/workflows/ci.yml/badge.svg)](https://github.com/spider-gazelle/rethinkdb-orm/actions/workflows/ci.yml)\n[![Documentation](https://img.shields.io/badge/Documentation-available-brightgreen.svg)](https://spider-gazelle.github.io/rethinkdb-orm)\n\nExtending [ActiveModel](https://github.com/spider-gazelle/active-model) for attribute definitions, callbacks and validations\n\n- [RethinkDB ORM for Crystal Lang](#rethinkdb-orm-for-crystal-lang)\n  - [Callbacks](#callbacks)\n  - [Associations](#associations)\n    - [`belongs_to`](#belongsto)\n    - [`has_many`](#hasmany)\n    - [`has_one`](#hasone)\n    - [Dependency](#dependency)\n  - [Indexes](#indexes)\n  - [Changefeeds](#changefeeds)\n  - [Validations](#validations)\n    - [`ensure_unique`](#ensureunique)\n  - [Timestamps](#timestamps)\n\n## Configuration\n\n```crystal\n# Below is the list of settings exposed by RethinkORM and their defaults\nRethinkORM::Settings.configure do |settings|\n  settings.host = ENV[\"RETHINKDB_HOST\"]? || \"localhost\"\n  settings.port = (ENV[\"RETHINKDB_PORT\"]? || 28015).to_i\n  settings.db = ENV[\"RETHINKDB_DB\"]? || ENV[\"RETHINKDB_DATABASE\"]? || \"test\"\n  settings.user = ENV[\"RETHINKDB_USER\"]? || \"admin\"\n  settings.password = ENV[\"RETHINKDB_PASSWORD\"]? || \"\"\n  settings.lock_expire = (ENV[\"RETHINKDB_LOCK_EXPIRE\"]? || 30).to_i.seconds\n  settings.lock_timeout = (ENV[\"RETHINKDB_LOCK_TIMEOUT\"]? || 5).to_i.seconds\n  settings.retry_interval = (ENV[\"RETHINKDB_TIMEOUT\"]? || 2).to_i.seconds\n\n  # Driver level reconnection attempts\n  settings.retry_attempts = ENV[\"RETHINKDB_RETRIES\"]?.try(&.to_i) || 10\n\n  # ORM level query retries\n  settings.query_retries = ENV[\"RETHINKDB_QUERY_RETRIES\"]?.try &.to_i || 10\nend\n```\n\n## Callbacks\n\nRegister callbacks for `save`, `update`, `create` and `destroy` by setting the corresponding before/after callback handler.\n\n```crystal\nclass ModelWithCallbacks < RethinkORM::Base\n  attribute address : String\n  attribute age : Int32 = 10\n\n  before_create :set_address\n  after_update :set_age\n  before_destroy do\n    self.name = \"joe\"\n  end\n\n  def set_address\n    self.address = \"23\"\n  end\n\n  def set_age\n    self.age = 30\n  end\nend\n```\n\n## Associations\n\nSet associations with `belongs_to`, `has_many` and `has_one`.\n\nAccess children in parent by accessing the method correpsonding to the pluralised child. Children collection method name is generated by dumb pluralisation (appending an s). Optionally set children collection name in `has_many` by setting `collection_name` param.\n\nThe `has_many` association requires the `belongs_to` association on the child. By default, `belongs_to` creates a secondary index on the foreign key.\n\n```crystal\nclass Parent < RethinkORM::Base\n  attribute name : String\n  has_many Child, collection_name: \"children\"\nend\n\nclass Child < RethinkORM::Base\n  attribute age : Int32\n  belongs_to Parent\n  has_many Pet\nend\n\nclass Pet < RethinkORM::Base\n  attribute name : String\n  belongs_to Child\nend\n\nparent = Parent.new(name: \"Phil\")\nparent.children.empty? # => true\n\nchild = Child.new(age: 99)\nchild.pets.empty? # => true\n```\n\n### `belongs_to`\n\nParameter      |                                                               | Default\n-------------- | ------------------------------------------------------------- | -------\n`parent_class` | The parent class who this class is dependent on               |\n`dependent`    | Sets destroy behaviour. One of `:none`, `:destroy`, `:delete` | `:none`\n`create_index` | Create a secondary index on the foreign key                   | `true`\n\n### `has_many`\n\nParameter         |                                                                               | Default\n----------------- | ----------------------------------------------------------------------------- | -------\n`child_class`     | The parent class who this class is dependent on                               |\n`dependent`       | Sets destroy behaviour. One of `:none`, `:destroy`, `:delete`                 | `:none`\n`collection_name` | Define collection name, otherwise collection named through dumb pluralisation | `nil`\n\n### `has_one`\n\nParameter         |                                                                               | Default\n----------------- | ----------------------------------------------------------------------------- | -------\n`child_class`     | The parent class who this class is dependent on                               |\n`dependent`       | Sets destroy behaviour. One of `:none`, `:destroy`, `:delete`                 | `:none`\n`collection_name` | Define collection name, otherwise collection named through dumb pluralisation | `nil`\n\n### Dependency\n\n`dependent` param in the association definition macros defines the fate of the association on model destruction.<br>\nDefault is `:none`, `:destroy` and `:delete` ensure destruction of association dependents.\n\n## Indexes\n\nSet secondary indexes with `secondary_index`\n\nParameter   |                                               |\n----------- | --------------------------------------------- |\n`attribute` | defines the field on which to create an index |\n\n## Changefeeds\n\nAccess the changefeed of a document or table through the `changes` query.<br>\nDefaults to watch for events on a table if no id provided.\n\nParameter |                                     | Default\n--------- | ----------------------------------- | -------\n`id`      | id of document to watch for changes | nil\n\nReturns an iterator that emits `NamedTuple(value: T, event: Event)`<br>\n\n- `Changefeed::Event::Deleted` events yield the deleted model\n- `Changefeed::Event::Created` events yield the created model\n- `Changefeed::Event::Updated` events yield the updated model\n\n```crystal\nclass Game < RethinkORM::Base\n  attribute type : String\n  attribute score : Int32, default: 0\nend\n\nballgame = Game.create!(type: \"footy\")\n\n# Observe changes on a single document\nspawn do\n  Game.changes(ballgame.id).each do |change|\n    game = change[:value]\n    puts \"looks like the score is #{game.score}\" unless game.nil?\n  end\nend\n\n# Observe changes on a table\nspawn do\n  Game.changes.each do |change|\n    game = change[:value]\n    puts \"#{game.type}: #{game.score}\" unless game.nil?\n    puts \"game event: #{change[:event]}\"\n  end\nend\n```\n\n## Validations\n\nBuilds on [active-model's validation](https://github.com/spider-gazelle/active-model#validations)\n\n### `ensure_unique`\n\nFails to validate if field with duplicate value present in db.\nIf scope is set, the callback/block signature must be a tuple with types matching that of the scope.\nThe field(s) are set with the result of the transform block upon successful validation\n\nParameter               |                                                         | Default\n----------------------- | ------------------------------------------------------- | -------\n`field`                 | Model attribute on which to guarantee uniqueness        |\n`scope`                 | Attributes passed to the transform, defaults to :field  | nil\n`create_index`          | Whether or not to generate a secondary index            | true\n`callback : T -> T`     | Optional function to transform field value              | nil\n`block : T -> T`        | Optional block to transform field value before querying | nil\n\n\n## Timestamps\n\nAdds creates `created_at` and `updated_at` attributes.\n- `updated_at` is set through the `before_update` callback, and initially set in the `before_save` callback.\n- `created_at` is set through the `before_create` callback.\n\nThe generated timestamp is UTC.\n\n```crystal\nclass Timo < RethinkORM::Base\n  # Simply include the module\n  include RethinkORM::Timestamps\n\n  attribute name : String\nend\n```\n","program":{"html_id":"rethinkdb-orm/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[{"html_id":"rethinkdb-orm/RethinkDB/Shortcuts","kind":"module","full_name":"RethinkDB::Shortcuts","name":"Shortcuts"}],"locations":[],"repository_name":"rethinkdb-orm","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"rethinkdb-orm/RethinkDB/Shortcuts","kind":"module","full_name":"RethinkDB::Shortcuts","name":"Shortcuts"}],"extended_modules":[{"html_id":"rethinkdb-orm/RethinkDB/Shortcuts","kind":"module","full_name":"RethinkDB::Shortcuts","name":"Shortcuts"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"rethinkdb-orm/RethinkDB","path":"RethinkDB.html","kind":"module","full_name":"RethinkDB","name":"RethinkDB","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lib/rethinkdb/src/rethinkdb.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/api-datum.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/api-db.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/api-global.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/api-grouped.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/api-row.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/api-rows.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/api-stream.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/api-table.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/api-term.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/auth.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/connection.cr","line_number":15,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/constants.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/cursor.cr","line_number":4,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/error.cr","line_number":1,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/message.cr","line_number":3,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/serialization.cr","line_number":106,"url":null},{"filename":"lib/rethinkdb/src/rethinkdb/term.cr","line_number":3,"url":null},{"filename":"src/rethinkdb-orm/connection.cr","line_number":9,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"rethinkdb-orm/RethinkDB/Connection","path":"RethinkDB/Connection.html","kind":"class","full_name":"RethinkDB::Connection","name":"Connection","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/rethinkdb/src/rethinkdb/connection.cr","line_number":16,"url":null},{"filename":"src/rethinkdb-orm/connection.cr","line_number":10,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkDB","kind":"module","full_name":"RethinkDB","name":"RethinkDB"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"closed?-instance-method","html_id":"closed?-instance-method","name":"closed?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/connection.cr","line_number":11,"url":null},"def":{"name":"closed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sock.closed?"}}],"macros":[],"types":[]}]},{"html_id":"rethinkdb-orm/RethinkORM","path":"RethinkORM.html","kind":"module","full_name":"RethinkORM","name":"RethinkORM","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/rethinkdb-orm.cr","line_number":3,"url":null},{"filename":"src/rethinkdb-orm/connection.cr","line_number":17,"url":null},{"filename":"src/rethinkdb-orm/lock.cr","line_number":10,"url":null},{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":3,"url":null},{"filename":"src/rethinkdb-orm/settings.cr","line_number":3,"url":null},{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":3,"url":null},{"filename":"src/rethinkdb-orm/utils/collection.cr","line_number":3,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"rethinkdb-orm/RethinkORM/Settings","kind":"module","full_name":"RethinkORM::Settings","name":"Settings"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/rethinkdb-orm.cr","line_number":6,"url":null},"def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings.configure do |settings|\n  yield settings\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"rethinkdb-orm/RethinkORM/AssociationCollection","path":"RethinkORM/AssociationCollection.html","kind":"class","full_name":"RethinkORM::AssociationCollection(Owner, Target)","name":"AssociationCollection","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":3,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"rethinkdb-orm/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(owner,foreign_key=nil)-class-method","html_id":"new(owner,foreign_key=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"owner","doc":null,"default_value":"","external_name":"owner","restriction":""},{"name":"foreign_key","doc":null,"default_value":"nil","external_name":"foreign_key","restriction":""}],"args_string":"(owner, foreign_key = <span class=\"n\">nil</span>)","args_html":"(owner, foreign_key = <span class=\"n\">nil</span>)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":13,"url":null},"def":{"name":"new","args":[{"name":"owner","doc":null,"default_value":"","external_name":"owner","restriction":""},{"name":"foreign_key","doc":null,"default_value":"nil","external_name":"foreign_key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = AssociationCollection(Owner, Target).allocate\n_.initialize(owner, foreign_key)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"all-instance-method","html_id":"all-instance-method","name":"all","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":17,"url":null},"def":{"name":"all","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if Target.has_index?(foreign_key)\n  Target.find_all([owner.id.as(String)], index: foreign_key)\nelse\n  Target.where({\"#{foreign_key}\" => owner.id.as(String)})\nend"}},{"id":"each(*args,**options)-instance-method","html_id":"each(*args,**options)-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":11,"url":null},"def":{"name":"each","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"all.each(*args, **options)"}},{"id":"each(*args,**options,&)-instance-method","html_id":"each(*args,**options,&)-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":11,"url":null},"def":{"name":"each","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"all.each(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"find(*args,**options)-instance-method","html_id":"find(*args,**options)-instance-method","name":"find","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":9,"url":null},"def":{"name":"find","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Target.find(*args, **options)"}},{"id":"find(*args,**options,&)-instance-method","html_id":"find(*args,**options,&)-instance-method","name":"find","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":9,"url":null},"def":{"name":"find","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"Target.find(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"find!(*args,**options)-instance-method","html_id":"find!(*args,**options)-instance-method","name":"find!","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":9,"url":null},"def":{"name":"find!","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Target.find!(*args, **options)"}},{"id":"find!(*args,**options,&)-instance-method","html_id":"find!(*args,**options,&)-instance-method","name":"find!","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":9,"url":null},"def":{"name":"find!","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"Target.find!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"where(**attrs)-instance-method","html_id":"where(**attrs)-instance-method","name":"where","doc":"Filter associated documents\n","summary":"<p>Filter associated documents </p>","abstract":false,"args":[],"args_string":"(**attrs)","args_html":"(**attrs)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":27,"url":null},"def":{"name":"where","args":[],"double_splat":{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Target.collection_query do |q|\n  index_query = q.get_all([owner.id], index: foreign_key)\n  attrs_hash = attrs.to_h\n  attrs_hash.empty? ? index_query : index_query.filter(attrs_hash)\nend"}},{"id":"where(**attrs,&)-instance-method","html_id":"where(**attrs,&)-instance-method","name":"where","doc":"Filter associated documents\n","summary":"<p>Filter associated documents </p>","abstract":false,"args":[],"args_string":"(**attrs, &)","args_html":"(**attrs, &)","location":{"filename":"src/rethinkdb-orm/utils/association_collection.cr","line_number":37,"url":null},"def":{"name":"where","args":[],"double_splat":{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":""},"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"Target.collection_query do |q|\n  index_query = q.get_all([owner.id], index: foreign_key)\n  attrs_hash = attrs.to_h\n  attribute_filtered = attrs_hash.empty? ? index_query : index_query.filter(attrs_hash)\n  attribute_filtered.filter do |t|\n    yield t\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Associations","path":"RethinkORM/Associations.html","kind":"module","full_name":"RethinkORM::Associations","name":"Associations","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/rethinkdb-orm/associations.cr","line_number":3,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"reset_associations-instance-method","html_id":"reset_associations-instance-method","name":"reset_associations","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/associations.cr","line_number":131,"url":null},"def":{"name":"reset_associations","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[{"id":"belongs_to(parent_class,dependent=:none,create_index=true,association_name=nil,foreign_key=nil,presence=false)-macro","html_id":"belongs_to(parent_class,dependent=:none,create_index=true,association_name=nil,foreign_key=nil,presence=false)-macro","name":"belongs_to","doc":"Defines getter and setter for parent relationship","summary":"<p>Defines getter and setter for parent relationship</p>","abstract":false,"args":[{"name":"parent_class","doc":null,"default_value":"","external_name":"parent_class","restriction":""},{"name":"dependent","doc":null,"default_value":":none","external_name":"dependent","restriction":""},{"name":"create_index","doc":null,"default_value":"true","external_name":"create_index","restriction":""},{"name":"association_name","doc":null,"default_value":"nil","external_name":"association_name","restriction":""},{"name":"foreign_key","doc":null,"default_value":"nil","external_name":"foreign_key","restriction":""},{"name":"presence","doc":null,"default_value":"false","external_name":"presence","restriction":""}],"args_string":"(parent_class, dependent = <span class=\"n\">:none</span>, create_index = <span class=\"n\">true</span>, association_name = <span class=\"n\">nil</span>, foreign_key = <span class=\"n\">nil</span>, presence = <span class=\"n\">false</span>)","location":{"filename":"src/rethinkdb-orm/associations.cr","line_number":5,"url":null},"def":{"name":"belongs_to","args":[{"name":"parent_class","doc":null,"default_value":"","external_name":"parent_class","restriction":""},{"name":"dependent","doc":null,"default_value":":none","external_name":"dependent","restriction":""},{"name":"create_index","doc":null,"default_value":"true","external_name":"create_index","restriction":""},{"name":"association_name","doc":null,"default_value":"nil","external_name":"association_name","restriction":""},{"name":"foreign_key","doc":null,"default_value":"nil","external_name":"foreign_key","restriction":""},{"name":"presence","doc":null,"default_value":"false","external_name":"presence","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% parent_name = association_name || (parent_class.id.stringify.underscore.downcase.gsub(/::/, \"_\")) %}\n\n    \n{% foreign_key = (foreign_key || \"#{parent_name.id}_id\").id %}\n\n    \n{% association_method = parent_name.id.symbolize %}\n\n    \n{% assoc_var = \"__#{parent_name.id}\".id %}\n\n\n    attribute \n{{ foreign_key.id }}\n : String \n{% if presence %}{% else %} | Nil {% end %}\n, parent: \n{{ parent_class.id.stringify }}\n, \nes_type: \"keyword\"\n    property \n{{ assoc_var }}\n : \n{{ parent_class }}\n?\n    destroy_callback(\n{{ association_method }}\n, \n{{ dependent }}\n)\n\n    \n{% if create_index %}\n      secondary_index({{ foreign_key.id }})\n    {% end %}\n\n\n    \n# Retrieves the parent relationship\n\n    def \n{{ parent_name.id }}\n : \n{{ parent_class }}\n?\n      parent = @\n{{ assoc_var }}\n\n      key = self.\n{{ foreign_key }}\n\n\n      return parent if parent\n\n      self.\n{{ assoc_var }}\n = key ? \n{{ parent_class }}\n.find(key) : nil\n    \nend\n\n    def \n{{ parent_name.id }}\n! : \n{{ parent_class }}\n\n      parent = @\n{{ assoc_var }}\n\n      key = self.\n{{ foreign_key }}\n\n\n      return parent if parent\n      raise RethinkORM::Error.new(\"No \n{{ foreign_key }}\n set\") unless key\n\n      self.\n{{ assoc_var }}\n = \n{{ parent_class }}\n.find!(key)\n    \nend\n\n    \n# Sets the parent relationship\n\n    def \n{{ parent_name.id }}\n=(parent : \n{{ parent_class }}\n)\n      self.\n{{ assoc_var }}\n = parent\n      self.\n{{ foreign_key.id }}\n = parent.id.as(String)\n    \nend\n\n    def reset_associations\n      self.\n{{ assoc_var }}\n = nil\n    \nend\n\n    \n# Look up instances of this model dependent on the foreign key\n\n    def self.by_\n{{ foreign_key.id }}\n(id)\n      if self.has_index?(\n{{ foreign_key.id.stringify }}\n)\n        self.find_all([id], index: \n{{ foreign_key.id.stringify }}\n)\n      \nelse\n        self.where(\n{{ foreign_key }}\n: id)\n      \nend\n    \nend\n  \n"}},{"id":"has_many(child_class,collection_name=nil,dependent=:none,foreign_key=nil)-macro","html_id":"has_many(child_class,collection_name=nil,dependent=:none,foreign_key=nil)-macro","name":"has_many","doc":"Must be used in conjunction with the belongs_to macro","summary":"<p>Must be used in conjunction with the belongs_to macro</p>","abstract":false,"args":[{"name":"child_class","doc":null,"default_value":"","external_name":"child_class","restriction":""},{"name":"collection_name","doc":null,"default_value":"nil","external_name":"collection_name","restriction":""},{"name":"dependent","doc":null,"default_value":":none","external_name":"dependent","restriction":""},{"name":"foreign_key","doc":null,"default_value":"nil","external_name":"foreign_key","restriction":""}],"args_string":"(child_class, collection_name = <span class=\"n\">nil</span>, dependent = <span class=\"n\">:none</span>, foreign_key = <span class=\"n\">nil</span>)","location":{"filename":"src/rethinkdb-orm/associations.cr","line_number":103,"url":null},"def":{"name":"has_many","args":[{"name":"child_class","doc":null,"default_value":"","external_name":"child_class","restriction":""},{"name":"collection_name","doc":null,"default_value":"nil","external_name":"collection_name","restriction":""},{"name":"dependent","doc":null,"default_value":":none","external_name":"dependent","restriction":""},{"name":"foreign_key","doc":null,"default_value":"nil","external_name":"foreign_key","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% child_collection = (collection_name ? collection_name : child_class + 's').underscore.downcase %}\n\n    \n{% association_method = child_collection.id.symbolize %}\n\n\n    destroy_callback(\n{{ association_method }}\n, \n{{ dependent }}\n)\n\n    def \n{{ child_collection.id }}\n\n      RethinkORM::AssociationCollection(self, \n{{ child_class }}\n).new(self, \n{{ foreign_key }}\n)\n    \nend\n  \n"}},{"id":"has_one(child_class,dependent=:none,create_index=false,association_name=nil,presence=false)-macro","html_id":"has_one(child_class,dependent=:none,create_index=false,association_name=nil,presence=false)-macro","name":"has_one","doc":null,"summary":null,"abstract":false,"args":[{"name":"child_class","doc":null,"default_value":"","external_name":"child_class","restriction":""},{"name":"dependent","doc":null,"default_value":":none","external_name":"dependent","restriction":""},{"name":"create_index","doc":null,"default_value":"false","external_name":"create_index","restriction":""},{"name":"association_name","doc":null,"default_value":"nil","external_name":"association_name","restriction":""},{"name":"presence","doc":null,"default_value":"false","external_name":"presence","restriction":""}],"args_string":"(child_class, dependent = <span class=\"n\">:none</span>, create_index = <span class=\"n\">false</span>, association_name = <span class=\"n\">nil</span>, presence = <span class=\"n\">false</span>)","location":{"filename":"src/rethinkdb-orm/associations.cr","line_number":59,"url":null},"def":{"name":"has_one","args":[{"name":"child_class","doc":null,"default_value":"","external_name":"child_class","restriction":""},{"name":"dependent","doc":null,"default_value":":none","external_name":"dependent","restriction":""},{"name":"create_index","doc":null,"default_value":"false","external_name":"create_index","restriction":""},{"name":"association_name","doc":null,"default_value":"nil","external_name":"association_name","restriction":""},{"name":"presence","doc":null,"default_value":"false","external_name":"presence","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% child = association_name || (child_class.id.underscore.downcase.gsub(/::/, \"_\")) %}\n\n    \n{% assoc_var = \"__#{child.id}\".id %}\n\n    \n{% foreign_key = child + \"_id\" %}\n\n    \n{% association_method = child.id.symbolize %}\n\n\n    attribute \n{{ foreign_key.id }}\n : String \n{% if presence %}{% else %} | Nil {% end %}\n\n    property \n{{ assoc_var }}\n : \n{{ child_class }}\n?\n    destroy_callback(\n{{ association_method }}\n, \n{{ dependent }}\n)\n\n    \n{% if create_index %}\n      secondary_index({{ foreign_key.id }})\n    {% end %}\n\n\n    \n# Get cached child or attempt to load an associated \n{{ child.id }}\n\n\n    def \n{{ child.id }}\n : \n{{ child_class }}\n?\n      key = self.\n{{ foreign_key.id }}\n\n      child = @\n{{ assoc_var }}\n\n      return child unless child.nil?\n\n      self.\n{{ assoc_var }}\n = key && !key.empty? ? \n{{ child_class }}\n.find(key)\n                                                : nil\n    \nend\n\n    def \n{{ child.id }}\n! : \n{{ child_class }}\n\n      key = self.\n{{ foreign_key.id }}\n\n      child = @\n{{ assoc_var }}\n\n      return child unless child.nil?\n      raise RethinkORM::Error.new(\"No \n{{ foreign_key.id }}\n set\") unless key\n\n      self.\n{{ assoc_var }}\n = \n{{ child_class }}\n.find!(key)\n    \nend\n\n    def \n{{ child.id }}\n=(child)\n      self.\n{{ assoc_var }}\n = child\n      self.\n{{ foreign_key.id }}\n = child.id\n    \nend\n\n    def reset_associations\n      self.\n{{ assoc_var }}\n = nil\n    \nend\n  \n"}}],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Base","path":"RethinkORM/Base.html","kind":"class","full_name":"RethinkORM::Base","name":"Base","abstract":true,"superclass":{"html_id":"rethinkdb-orm/ActiveModel/Model","kind":"class","full_name":"ActiveModel::Model","name":"Model"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Validators","kind":"module","full_name":"RethinkORM::Validators","name":"Validators"},{"html_id":"rethinkdb-orm/RethinkORM/Table","kind":"module","full_name":"RethinkORM::Table","name":"Table"},{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"},{"html_id":"rethinkdb-orm/RethinkORM/Persistence","kind":"module","full_name":"RethinkORM::Persistence","name":"Persistence"},{"html_id":"rethinkdb-orm/RethinkORM/Index","kind":"module","full_name":"RethinkORM::Index","name":"Index"},{"html_id":"rethinkdb-orm/RethinkORM/Associations","kind":"module","full_name":"RethinkORM::Associations","name":"Associations"},{"html_id":"rethinkdb-orm/ActiveModel/Callbacks","kind":"module","full_name":"ActiveModel::Callbacks","name":"Callbacks"},{"html_id":"rethinkdb-orm/ActiveModel/Validation","kind":"module","full_name":"ActiveModel::Validation","name":"Validation"},{"html_id":"rethinkdb-orm/ActiveModel/Model","kind":"class","full_name":"ActiveModel::Model","name":"Model"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/base.cr","line_number":14,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"AM_PARENT_TYPE","name":"AM_PARENT_TYPE","value":"{:type => RethinkORM::Base} of Nil => Nil","doc":null,"summary":null},{"id":"INDICES","name":"INDICES","value":"[] of NamedTuple(field: String, table: String)","doc":null,"summary":null},{"id":"TABLES","name":"TABLES","value":"[\"locks\"] of String","doc":null,"summary":null}],"included_modules":[{"html_id":"rethinkdb-orm/ActiveModel/Callbacks","kind":"module","full_name":"ActiveModel::Callbacks","name":"Callbacks"},{"html_id":"rethinkdb-orm/ActiveModel/Validation","kind":"module","full_name":"ActiveModel::Validation","name":"Validation"},{"html_id":"rethinkdb-orm/RethinkORM/Associations","kind":"module","full_name":"RethinkORM::Associations","name":"Associations"},{"html_id":"rethinkdb-orm/RethinkORM/Index","kind":"module","full_name":"RethinkORM::Index","name":"Index"},{"html_id":"rethinkdb-orm/RethinkORM/Persistence","kind":"module","full_name":"RethinkORM::Persistence","name":"Persistence"},{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"},{"html_id":"rethinkdb-orm/RethinkORM/Table","kind":"module","full_name":"RethinkORM::Table","name":"Table"},{"html_id":"rethinkdb-orm/RethinkORM/Validators","kind":"module","full_name":"RethinkORM::Validators","name":"Validators"}],"extended_modules":[],"subclasses":[{"html_id":"rethinkdb-orm/RethinkORM/Lock","kind":"class","full_name":"RethinkORM::Lock","name":"Lock"}],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[{"id":"all(**options)-class-method","html_id":"all(**options)-class-method","name":"all","doc":"Cursor of each model in the database","summary":"<p>Cursor of each model in the database</p>","abstract":false,"args":[],"args_string":"(**options)","args_html":"(**options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"all","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cursor = Connection.raw(**options) do |q|\n  q.table(table_name)\nend\nCollection(self).new(cursor)\n"}},{"id":"attributes:Array(Symbol)-class-method","html_id":"attributes:Array(Symbol)-class-method","name":"attributes","doc":"Returns all attribute keys.","summary":"<p>Returns all attribute keys.</p>","abstract":false,"args":[],"args_string":" : Array(Symbol)","args_html":" : Array(Symbol)","location":null,"def":{"name":"attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Symbol)","visibility":"Public","body":"[:id]"}},{"id":"changes(id:String?=nil,**options)-class-method","html_id":"changes(id:String?=nil,**options)-class-method","name":"changes","doc":"Changefeed at document (if id passed) or table level\n\nYields an infinite iterator  of model events","summary":"<p>Changefeed at document (if id passed) or table level</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"String | ::Nil"}],"args_string":"(id : String? = <span class=\"n\">nil</span>, **options)","args_html":"(id : String? = <span class=\"n\">nil</span>, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"changes","args":[{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"String | ::Nil"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cursor = table_query(**options) do |q|\n  id ? (q.get(id)).changes : q.changes\nend\nChangefeed(self).new(cursor)\n"}},{"id":"changes(**options,&:RethinkDB::Table->HasChanges)-class-method","html_id":"changes(**options,&:RethinkDB::Table->HasChanges)-class-method","name":"changes","doc":"Creates a Changefeed on query\n","summary":"<p>Creates a Changefeed on query </p>","abstract":false,"args":[],"args_string":"(**options, & : RethinkDB::Table -> HasChanges)","args_html":"(**options, & : RethinkDB::Table -> <a href=\"../RethinkORM/Queries/HasChanges.html\">HasChanges</a>)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"changes","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(RethinkDB::Table -> HasChanges)"},"return_type":"","visibility":"Public","body":"cursor = table_query(**options) do |q|\n  change_query = yield q\n  change_query.changes\nend\nChangefeed(self).new(cursor)\n"}},{"id":"clear-class-method","html_id":"clear-class-method","name":"clear","doc":"Removes all records from the table\n","summary":"<p>Removes all records from the table </p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":20,"url":null},"def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Connection.raw do |q|\n  (q.table(@@table_name)).delete\nend"}},{"id":"collection_query(**options,&)-class-method","html_id":"collection_query(**options,&)-class-method","name":"collection_query","doc":"**Unsafe** method until `where` can accept more generic arguments\nMakes 2 **LARGE** assumptions\n- User correctly scopes the query under the right table\n- User forms a query that returns a collection of models\n\nShould raise/not compile on malformed query/incorrect return type to create a collection","summary":"<p><strong>Unsafe</strong> method until <code><a href=\"../RethinkORM/Base.html#where(&predicate:RethinkDB::DatumTerm-%3ERethinkDB::DatumTerm)-class-method\">.where</a></code> can accept more generic arguments Makes 2 <strong>LARGE</strong> assumptions - User correctly scopes the query under the right table - User forms a query that returns a collection of models</p>","abstract":false,"args":[],"args_string":"(**options, &)","args_html":"(**options, &)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"collection_query","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"cursor = Connection.raw(**options) do |q|\n  yield q.table(table_name)\nend\nCollection(self).new(cursor)\n"}},{"id":"count(**attrs,&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","html_id":"count(**attrs,&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","name":"count","doc":"Returns a count of documents for which predicate block is true\n","summary":"<p>Returns a count of documents for which predicate block is true </p>","abstract":false,"args":[],"args_string":"(**attrs, &predicate : RethinkDB::DatumTerm -> RethinkDB::DatumTerm)","args_html":"(**attrs, &predicate : RethinkDB::DatumTerm -> RethinkDB::DatumTerm)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"count","args":[],"double_splat":{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":""},"splat_index":null,"yields":1,"block_arg":{"name":"predicate","doc":null,"default_value":"","external_name":"predicate","restriction":"(RethinkDB::DatumTerm -> RethinkDB::DatumTerm)"},"return_type":"","visibility":"Public","body":"result = table_query do |q|\n  handle = (attrs.empty? ? q : q.filter(attrs))\n  handle.filter(&predicate).count\nend\nresult.try(&.as_i) || 0\n"}},{"id":"count(**attrs)-class-method","html_id":"count(**attrs)-class-method","name":"count","doc":"Returns a count of all documents in the table\n","summary":"<p>Returns a count of all documents in the table </p>","abstract":false,"args":[],"args_string":"(**attrs)","args_html":"(**attrs)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"count","args":[],"double_splat":{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = table_query do |q|\n  (q.filter(attrs)).count\nend\nresult.try(&.as_i) || 0\n"}},{"id":"count-class-method","html_id":"count-class-method","name":"count","doc":"Returns a count of all documents in the table\n","summary":"<p>Returns a count of all documents in the table </p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"count","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = table_query do |q|\n  q.count\nend\nresult.try(&.as_i) || 0\n"}},{"id":"create(**attributes)-class-method","html_id":"create(**attributes)-class-method","name":"create","doc":"Creates the model.\n\nPersistence can be confirmed via `#persisted?`","summary":"<p>Creates the model.</p>","abstract":false,"args":[],"args_string":"(**attributes)","args_html":"(**attributes)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":20,"url":null},"def":{"name":"create","args":[],"double_splat":{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"document = new(**attributes)\ndocument.save!\ndocument\n"}},{"id":"create!(**attributes)-class-method","html_id":"create!(**attributes)-class-method","name":"create!","doc":"Creates the model.\n\nSee `#save!`","summary":"<p>Creates the model.</p>","abstract":false,"args":[],"args_string":"(**attributes)","args_html":"(**attributes)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":20,"url":null},"def":{"name":"create!","args":[],"double_splat":{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(new(**attributes)).save!"}},{"id":"exists?(id:String,**options)-class-method","html_id":"exists?(id:String,**options)-class-method","name":"exists?","doc":"Check for document presence in the table\n","summary":"<p>Check for document presence in the table </p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"args_string":"(id : String, **options)","args_html":"(id : String, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"exists?","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = table_query(**options) do |q|\n  (q.get(id)) != nil\nend\nresult.as_bool\n"}},{"id":"find(id:String,**options)-class-method","html_id":"find(id:String,**options)-class-method","name":"find","doc":"Find single document by id\n","summary":"<p>Find single document by id </p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"args_string":"(id : String, **options)","args_html":"(id : String, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"find","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = table_query(**options) do |q|\n  q.get(id)\nend\nif result.raw.nil?\nelse\n  self.from_trusted_json(result.to_json)\nend\n"}},{"id":"find!(id:String,**options)-class-method","html_id":"find!(id:String,**options)-class-method","name":"find!","doc":"Lookup document by id\n\nThrows if document is not present","summary":"<p>Lookup document by id</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"args_string":"(id : String, **options)","args_html":"(id : String, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"find!","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"document = find(id, **options)\nif document\nelse\n  raise(RethinkORM::Error::DocumentNotFound.new(\"Key not present: #{id}\"))\nend\ndocument\n"}},{"id":"find_all(ids:Array|Tuple,**options)-class-method","html_id":"find_all(ids:Array|Tuple,**options)-class-method","name":"find_all","doc":"Query by ids, optionally set a secondary index\n","summary":"<p>Query by ids, optionally set a secondary index </p>","abstract":false,"args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":"Array | Tuple"}],"args_string":"(ids : Array | Tuple, **options)","args_html":"(ids : Array | Tuple, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"find_all","args":[{"name":"ids","doc":null,"default_value":"","external_name":"ids","restriction":"Array | Tuple"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cursor = table_query do |q|\n  q.get_all(ids, **options)\nend\nCollection(self).new(cursor)\n"}},{"id":"find_by(**attribute)-class-method","html_id":"find_by(**attribute)-class-method","name":"find_by","doc":"Returns documents with columns matching the given criteria\n","summary":"<p>Returns documents with columns matching the given criteria </p>\n\n<p><span class=\"flag red\">DEPRECATED</span>  Use <code><a href=\"../RethinkORM/Base.html#where(&predicate:RethinkDB::DatumTerm-%3ERethinkDB::DatumTerm)-class-method\">.where</a></code> instead.</p>\n\n","abstract":false,"args":[],"args_string":"(**attribute)","args_html":"(**attribute)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"find_by","args":[],"double_splat":{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(**attribute)"}},{"id":"find_by(**attribute,&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","html_id":"find_by(**attribute,&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","name":"find_by","doc":"Returns documents with columns matching the given criteria\n","summary":"<p>Returns documents with columns matching the given criteria </p>\n\n<p><span class=\"flag red\">DEPRECATED</span>  Use <code><a href=\"../RethinkORM/Base.html#where(&predicate:RethinkDB::DatumTerm-%3ERethinkDB::DatumTerm)-class-method\">.where</a></code> instead.</p>\n\n","abstract":false,"args":[],"args_string":"(**attribute, &predicate : RethinkDB::DatumTerm -> RethinkDB::DatumTerm)","args_html":"(**attribute, &predicate : RethinkDB::DatumTerm -> RethinkDB::DatumTerm)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"find_by","args":[],"double_splat":{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},"splat_index":null,"yields":1,"block_arg":{"name":"predicate","doc":null,"default_value":"","external_name":"predicate","restriction":"(RethinkDB::DatumTerm -> RethinkDB::DatumTerm)"},"return_type":"","visibility":"Public","body":"where(**attribute, &predicate)"}},{"id":"get_all(values:Array|Tuple,**options)-class-method","html_id":"get_all(values:Array|Tuple,**options)-class-method","name":"get_all","doc":"Query by ids, optionally set a secondary index\n","summary":"<p>Query by ids, optionally set a secondary index </p>\n\n<p><span class=\"flag red\">DEPRECATED</span>  Use <code><a href=\"../RethinkORM/Base.html#find_all(ids:Array%7CTuple,**options)-class-method\">.find_all</a></code> instead.</p>\n\n","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array | Tuple"}],"args_string":"(values : Array | Tuple, **options)","args_html":"(values : Array | Tuple, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"get_all","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array | Tuple"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"find_all(values, **options)"}},{"id":"has_index?(field)-class-method","html_id":"has_index?(field)-class-method","name":"has_index?","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""}],"args_string":"(field)","args_html":"(field)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":19,"url":null},"def":{"name":"has_index?","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"RethinkORM::Base::INDICES.any? do |index|\n  (self.table_name == index[:table]) && (field == index[:field])\nend"}},{"id":"raw_changes(**options,&:RethinkDB::Table->HasChanges)-class-method","html_id":"raw_changes(**options,&:RethinkDB::Table->HasChanges)-class-method","name":"raw_changes","doc":"Creates a Changefeed::Raw on query\n","summary":"<p>Creates a Changefeed::Raw on query </p>","abstract":false,"args":[],"args_string":"(**options, & : RethinkDB::Table -> HasChanges)","args_html":"(**options, & : RethinkDB::Table -> <a href=\"../RethinkORM/Queries/HasChanges.html\">HasChanges</a>)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"raw_changes","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(RethinkDB::Table -> HasChanges)"},"return_type":"","visibility":"Public","body":"cursor = table_query(**options) do |q|\n  query = yield q\n  query.changes\nend\nChangefeed::Raw.new(cursor)\n"}},{"id":"raw_changes(id:String?=nil,**options)-class-method","html_id":"raw_changes(id:String?=nil,**options)-class-method","name":"raw_changes","doc":"Establishes a changefeed of models in a RethinkDB table\nChangefeed at document (id passed) or table level\n","summary":"<p>Establishes a changefeed of models in a RethinkDB table Changefeed at document (id passed) or table level </p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"String | ::Nil"}],"args_string":"(id : String? = <span class=\"n\">nil</span>, **options)","args_html":"(id : String? = <span class=\"n\">nil</span>, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"raw_changes","args":[{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"String | ::Nil"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cursor = table_query(**options) do |q|\n  id ? (q.get(id)).changes : q.changes\nend\nChangefeed::Raw.new(cursor)\n"}},{"id":"raw_query(**options,&)-class-method","html_id":"raw_query(**options,&)-class-method","name":"raw_query","doc":"**Unsafe** method until `where` can accept more generic arguments\nMakes 2 **LARGE** assumptions\n- User correctly scopes the query under the right table\n- User forms a query that returns a collection of models\n\nShould raise/not compile on malformed query/incorrect return type to create a collection","summary":"<p><strong>Unsafe</strong> method until <code><a href=\"../RethinkORM/Base.html#where(&predicate:RethinkDB::DatumTerm-%3ERethinkDB::DatumTerm)-class-method\">.where</a></code> can accept more generic arguments Makes 2 <strong>LARGE</strong> assumptions - User correctly scopes the query under the right table - User forms a query that returns a collection of models</p>","abstract":false,"args":[],"args_string":"(**options, &)","args_html":"(**options, &)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"raw_query","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"cursor = Connection.raw(**options) do |q|\n  yield q\nend\nCollection(self).new(cursor)\n"}},{"id":"table_query(**options,&)-class-method","html_id":"table_query(**options,&)-class-method","name":"table_query","doc":"Yield a RethinkDB handle namespaced under the document table\n","summary":"<p>Yield a RethinkDB handle namespaced under the document table </p>","abstract":false,"args":[],"args_string":"(**options, &)","args_html":"(**options, &)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"table_query","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"Connection.raw(**options) do |q|\n  yield q.table(table_name)\nend"}},{"id":"where(&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","html_id":"where(&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","name":"where","doc":"Returns documents for which predicate block is true\n","summary":"<p>Returns documents for which predicate block is true </p>","abstract":false,"args":[],"args_string":"(&predicate : RethinkDB::DatumTerm -> RethinkDB::DatumTerm)","args_html":"(&predicate : RethinkDB::DatumTerm -> RethinkDB::DatumTerm)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"where","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"predicate","doc":null,"default_value":"","external_name":"predicate","restriction":"(RethinkDB::DatumTerm -> RethinkDB::DatumTerm)"},"return_type":"","visibility":"Public","body":"cursor = table_query do |q|\n  q.filter(&predicate)\nend\nCollection(self).new(cursor)\n"}},{"id":"where(**attrs,&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","html_id":"where(**attrs,&predicate:RethinkDB::DatumTerm->RethinkDB::DatumTerm)-class-method","name":"where","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**attrs, &predicate : RethinkDB::DatumTerm -> RethinkDB::DatumTerm)","args_html":"(**attrs, &predicate : RethinkDB::DatumTerm -> RethinkDB::DatumTerm)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"where","args":[],"double_splat":{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":""},"splat_index":null,"yields":1,"block_arg":{"name":"predicate","doc":null,"default_value":"","external_name":"predicate","restriction":"(RethinkDB::DatumTerm -> RethinkDB::DatumTerm)"},"return_type":"","visibility":"Public","body":"cursor = table_query do |q|\n  (q.filter(attrs)).filter(&predicate)\nend\nCollection(self).new(cursor)\n"}},{"id":"where(attrs:Hash,**options)-class-method","html_id":"where(attrs:Hash,**options)-class-method","name":"where","doc":"Returns documents containing fields that match the attributes\n","summary":"<p>Returns documents containing fields that match the attributes </p>","abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Hash"}],"args_string":"(attrs : Hash, **options)","args_html":"(attrs : Hash, **options)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"where","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Hash"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cursor = table_query(**options) do |q|\n  q.filter(attrs)\nend\nCollection(self).new(cursor)\n"}},{"id":"where(**attrs)-class-method","html_id":"where(**attrs)-class-method","name":"where","doc":"Returns documents containing fields that match the attributes\n","summary":"<p>Returns documents containing fields that match the attributes </p>","abstract":false,"args":[],"args_string":"(**attrs)","args_html":"(**attrs)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":21,"url":null},"def":{"name":"where","args":[],"double_splat":{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(attrs.to_h)"}}],"constructors":[],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":39,"url":null},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if same?(other)\n  return true\nend\nif attributes == other.attributes\nelse\n  return false\nend\nif changed_attributes == other.changed_attributes\nelse\n  return false\nend\ntrue\n"}},{"id":"apply_defaults-instance-method","html_id":"apply_defaults-instance-method","name":"apply_defaults","doc":"Generate code to apply default values","summary":"<p>Generate code to apply default values</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"apply_defaults","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}},{"id":"assign_attributes(id:String?|Missing=Missing)-instance-method","html_id":"assign_attributes(id:String?|Missing=Missing)-instance-method","name":"assign_attributes","doc":"Assign to multiple attributes.","summary":"<p>Assign to multiple attributes.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"}],"args_string":"(id : String? | Missing = <span class=\"t\">Missing</span>)","args_html":"(id : String? | Missing = <span class=\"t\">Missing</span>)","location":null,"def":{"name":"assign_attributes","args":[{"name":"id","doc":null,"default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"assign_attributes(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-instance-method","html_id":"assign_attributes(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-instance-method","name":"assign_attributes","doc":"Assign to mulitple attributes via `HTTP::Params`.","summary":"<p>Assign to mulitple attributes via <code>HTTP::Params</code>.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"args_string":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","args_html":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","location":null,"def":{"name":"assign_attributes","args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__from_object_params__(params)\nself\n"}},{"id":"attributes-instance-method","html_id":"attributes-instance-method","name":"attributes","doc":"Returns a `Hash` of all attribute values","summary":"<p>Returns a <code>Hash</code> of all attribute values</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{:id => @id}"}},{"id":"attributes_tuple-instance-method","html_id":"attributes_tuple-instance-method","name":"attributes_tuple","doc":"Returns a `NamedTuple` of all attribute values.","summary":"<p>Returns a <code>NamedTuple</code> of all attribute values.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"attributes_tuple","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{id: @id}"}},{"id":"id_default:String?-instance-method","html_id":"id_default:String?-instance-method","name":"id_default","doc":"`id`'s default value","summary":"<p><code>id</code>'s default value</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":37,"url":null},"def":{"name":"id_default","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"nil"}},{"id":"persistent_attributes-instance-method","html_id":"persistent_attributes-instance-method","name":"persistent_attributes","doc":"Returns a `Hash` of all attributes that can be persisted.","summary":"<p>Returns a <code>Hash</code> of all attributes that can be persisted.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"persistent_attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{:id => @id}"}},{"id":"uuid_generator=(generator:Class)-instance-method","html_id":"uuid_generator=(generator:Class)-instance-method","name":"uuid_generator=","doc":"Allow user defined uuid generator","summary":"<p>Allow user defined uuid generator</p>","abstract":false,"args":[{"name":"generator","doc":null,"default_value":"","external_name":"generator","restriction":"Class"}],"args_string":"(generator : Class)","args_html":"(generator : Class)","location":{"filename":"src/rethinkdb-orm/base.cr","line_number":20,"url":null},"def":{"name":"uuid_generator=","args":[{"name":"generator","doc":null,"default_value":"","external_name":"generator","restriction":"Class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@uuid_generator = generator"}}],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Changefeed","path":"RethinkORM/Changefeed.html","kind":"class","full_name":"RethinkORM::Changefeed(T)","name":"Changefeed","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Iterator/IteratorWrapper","kind":"module","full_name":"Iterator::IteratorWrapper","name":"IteratorWrapper"},{"html_id":"rethinkdb-orm/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"rethinkdb-orm/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":5,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"rethinkdb-orm/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"rethinkdb-orm/Iterator/IteratorWrapper","kind":"module","full_name":"Iterator::IteratorWrapper","name":"IteratorWrapper"}],"extended_modules":[],"subclasses":[{"html_id":"rethinkdb-orm/RethinkORM/Changefeed/Raw","kind":"class","full_name":"RethinkORM::Changefeed::Raw","name":"Raw"}],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":"Wraps the Changefeed iterator and parses events","summary":"<p>Wraps the Changefeed iterator and parses events</p>","class_methods":[],"constructors":[{"id":"new(iterator:Iterator(RethinkDB::QueryResult))-class-method","html_id":"new(iterator:Iterator(RethinkDB::QueryResult))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"iterator","doc":null,"default_value":"","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult)"}],"args_string":"(iterator : Iterator(RethinkDB::QueryResult))","args_html":"(iterator : Iterator(RethinkDB::QueryResult))","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":15,"url":null},"def":{"name":"new","args":[{"name":"iterator","doc":null,"default_value":"","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Changefeed(T).allocate\n_.initialize(iterator)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":23,"url":null},"def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  result = wrapped_next\n  if result == Iterator::Stop::INSTANCE\n    stop\n  else\n    parse_changes(result)\n  end\nrescue Channel::ClosedError\n  raise(Error::ChangefeedClosed.new)\nrescue e\n  if e.message =~ (/Changefeed aborted/)\n    stop\n  else\n    raise(e)\n  end\nend"}},{"id":"stop-instance-method","html_id":"stop-instance-method","name":"stop","doc":"Shortcut for `Iterator::Stop::INSTANCE`, to signal that there are no more elements in an iterator.","summary":"<p>Shortcut for <code>Iterator::Stop::INSTANCE</code>, to signal that there are no more elements in an iterator.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":18,"url":null},"def":{"name":"stop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  @iterator.stop\nrescue\n  Channel::ClosedError\nend\nsuper()\n"}}],"macros":[],"types":[{"html_id":"rethinkdb-orm/RethinkORM/Changefeed/Event","path":"RethinkORM/Changefeed/Event.html","kind":"enum","full_name":"RethinkORM::Changefeed::Event","name":"Event","abstract":false,"superclass":null,"ancestors":[{"html_id":"rethinkdb-orm/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"rethinkdb-orm/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"rethinkdb-orm/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":9,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Created","name":"Created","value":"0","doc":null,"summary":null},{"id":"Updated","name":"Updated","value":"1","doc":null,"summary":null},{"id":"Deleted","name":"Deleted","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Changefeed","kind":"class","full_name":"RethinkORM::Changefeed(T)","name":"Changefeed"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"created?-instance-method","html_id":"created?-instance-method","name":"created?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":10,"url":null},"def":{"name":"created?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Created"}},{"id":"deleted?-instance-method","html_id":"deleted?-instance-method","name":"deleted?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":12,"url":null},"def":{"name":"deleted?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Deleted"}},{"id":"updated?-instance-method","html_id":"updated?-instance-method","name":"updated?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":11,"url":null},"def":{"name":"updated?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Updated"}}],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Changefeed/Raw","path":"RethinkORM/Changefeed/Raw.html","kind":"class","full_name":"RethinkORM::Changefeed::Raw","name":"Raw","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Changefeed","kind":"class","full_name":"RethinkORM::Changefeed","name":"Changefeed"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Changefeed","kind":"class","full_name":"RethinkORM::Changefeed","name":"Changefeed"},{"html_id":"rethinkdb-orm/Iterator/IteratorWrapper","kind":"module","full_name":"Iterator::IteratorWrapper","name":"IteratorWrapper"},{"html_id":"rethinkdb-orm/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"rethinkdb-orm/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":64,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Changefeed","kind":"class","full_name":"RethinkORM::Changefeed(T)","name":"Changefeed"},"doc":"Raw changefeed on a table","summary":"<p>Raw changefeed on a table</p>","class_methods":[],"constructors":[{"id":"new(iterator:Iterator(RethinkDB::QueryResult))-class-method","html_id":"new(iterator:Iterator(RethinkDB::QueryResult))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"iterator","doc":null,"default_value":"","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult)"}],"args_string":"(iterator : Iterator(RethinkDB::QueryResult))","args_html":"(iterator : Iterator(RethinkDB::QueryResult))","location":{"filename":"src/rethinkdb-orm/utils/changefeed.cr","line_number":15,"url":null},"def":{"name":"new","args":[{"name":"iterator","doc":null,"default_value":"","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(iterator)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"rethinkdb-orm/RethinkORM/Collection","path":"RethinkORM/Collection.html","kind":"class","full_name":"RethinkORM::Collection(T)","name":"Collection","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Iterator/IteratorWrapper","kind":"module","full_name":"Iterator::IteratorWrapper","name":"IteratorWrapper"},{"html_id":"rethinkdb-orm/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"rethinkdb-orm/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/collection.cr","line_number":4,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"rethinkdb-orm/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"rethinkdb-orm/Iterator/IteratorWrapper","kind":"module","full_name":"Iterator::IteratorWrapper","name":"IteratorWrapper"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(iterator:Iterator(RethinkDB::QueryResult)|RethinkDB::QueryResult)-class-method","html_id":"new(iterator:Iterator(RethinkDB::QueryResult)|RethinkDB::QueryResult)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"iterator","doc":null,"default_value":"","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult) | RethinkDB::QueryResult"}],"args_string":"(iterator : Iterator(RethinkDB::QueryResult) | RethinkDB::QueryResult)","args_html":"(iterator : Iterator(RethinkDB::QueryResult) | RethinkDB::QueryResult)","location":{"filename":"src/rethinkdb-orm/utils/collection.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"iterator","doc":null,"default_value":"","external_name":"iterator","restriction":"Iterator(RethinkDB::QueryResult) | RethinkDB::QueryResult"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Collection(T).allocate\n_.initialize(iterator)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next:T|Iterator::Stop-instance-method","html_id":"next:T|Iterator::Stop-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":" : T | Iterator::Stop","args_html":" : T | Iterator::Stop","location":{"filename":"src/rethinkdb-orm/utils/collection.cr","line_number":16,"url":null},"def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | Iterator::Stop","visibility":"Public","body":"result = if (iter = @atom_response)\n  iter.next\nelse\n  wrapped_next\nend\nif result.is_a?(Iterator::Stop)\n  return stop\nend\nif result.is_a?(T)\n  return result\nend\nbegin\n  T.from_trusted_json(result.to_json)\nrescue e : JSON::MappingError\n  if e.message.try(&.includes?(\"Expected BeginObject but was BeginArray\"))\n  else\n    raise(e)\n  end\n  atom_iterator = (result.as(RethinkDB::QueryResult)).as_a.map do |object|\n    T.from_trusted_json(object.to_json)\n  end.each\n  @atom_response = atom_iterator\n  atom_iterator.next\nend\n"}},{"id":"stop-instance-method","html_id":"stop-instance-method","name":"stop","doc":"Shortcut for `Iterator::Stop::INSTANCE`, to signal that there are no more elements in an iterator.","summary":"<p>Shortcut for <code>Iterator::Stop::INSTANCE</code>, to signal that there are no more elements in an iterator.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/utils/collection.cr","line_number":41,"url":null},"def":{"name":"stop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@iterator.stop\nsuper()\n"}}],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Connection","path":"RethinkORM/Connection.html","kind":"class","full_name":"RethinkORM::Connection","name":"Connection","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/connection.cr","line_number":18,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(self)","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"rethinkdb-orm/RethinkORM/Settings","kind":"module","full_name":"RethinkORM::Settings","name":"Settings"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[{"id":"db-class-method","html_id":"db-class-method","name":"db","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/connection.cr","line_number":29,"url":null},"def":{"name":"db","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@resource_lock.synchronize do\n  connection = @@db\n  if (@@resource_check && connection) && (!connection.closed?)\n    return connection\n  end\n  begin\n    connection = Retriable.retry(max_attempts: settings.retry_attempts, on: Socket::ConnectError, on_retry: ->(_e : Exception, attempt : Int32, _t : Time::Span, _i : Time::Span) do\n      Log.warn do\n        \"attempt #{attempt} connecting to #{settings.host}:#{settings.port}\"\n      end\n    end) do\n      RethinkDB::Connection.new(host: settings.host, port: settings.port, db: settings.db, user: settings.user, password: settings.password, max_retry_interval: settings.retry_interval, max_retry_attempts: settings.retry_attempts)\n    end\n  rescue e : Socket::ConnectError\n    raise(Error::ConnectError.new(\"failed to connect to #{settings.host}:#{settings.port} after #{settings.retry_attempts} retries\"))\n  end\n  @@db = connection\n  ensure_resources!(connection)\n  connection\nend"}},{"id":"raw(**options,&)-class-method","html_id":"raw(**options,&)-class-method","name":"raw","doc":"Passes the query builder to the block.\n\nAuto creates the database if its not already present.\nThe block defined query is run and raw results returned.","summary":"<p>Passes the query builder to the block.</p>","abstract":false,"args":[],"args_string":"(**options, &)","args_html":"(**options, &)","location":{"filename":"src/rethinkdb-orm/connection.cr","line_number":68,"url":null},"def":{"name":"raw","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"query = yield R\nRetriable.retry(max_attempts: settings.query_retries, on: IO::Error, on_retry: ->(_e : Exception, attempt : Int32, _t : Time::Span, _i : Time::Span) do\n  Log.warn do\n    \"attempt #{attempt} retrying query\"\n  end\nend) do\n  query.run(self.db, **options)\nend\n"}},{"id":"raw_json(json:String,**options,&)-class-method","html_id":"raw_json(json:String,**options,&)-class-method","name":"raw_json","doc":"Passes query builder and datum term of supplied raw json string\n","summary":"<p>Passes query builder and datum term of supplied raw json string </p>","abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"String"}],"args_string":"(json : String, **options, &)","args_html":"(json : String, **options, &)","location":{"filename":"src/rethinkdb-orm/connection.cr","line_number":83,"url":null},"def":{"name":"raw_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"String"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"raw(**options) do |q|\n  yield q, q.json(json)\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Error","path":"RethinkORM/Error.html","kind":"class","full_name":"RethinkORM::Error","name":"Error","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":1,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"rethinkdb-orm/RethinkORM/Error/ChangefeedClosed","kind":"class","full_name":"RethinkORM::Error::ChangefeedClosed","name":"ChangefeedClosed"},{"html_id":"rethinkdb-orm/RethinkORM/Error/ConnectError","kind":"class","full_name":"RethinkORM::Error::ConnectError","name":"ConnectError"},{"html_id":"rethinkdb-orm/RethinkORM/Error/DatabaseError","kind":"class","full_name":"RethinkORM::Error::DatabaseError","name":"DatabaseError"},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentExists","kind":"class","full_name":"RethinkORM::Error::DocumentExists","name":"DocumentExists"},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentInvalid","kind":"class","full_name":"RethinkORM::Error::DocumentInvalid","name":"DocumentInvalid"},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentNotFound","kind":"class","full_name":"RethinkORM::Error::DocumentNotFound","name":"DocumentNotFound"},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentNotSaved","kind":"class","full_name":"RethinkORM::Error::DocumentNotSaved","name":"DocumentNotSaved"},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockInvalidOp","kind":"class","full_name":"RethinkORM::Error::LockInvalidOp","name":"LockInvalidOp"},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockLost","kind":"class","full_name":"RethinkORM::Error::LockLost","name":"LockLost"},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockUnavailable","kind":"class","full_name":"RethinkORM::Error::LockUnavailable","name":"LockUnavailable"}],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(message:String?=&quot;&quot;)-class-method","html_id":"new(message:String?=&quot;&quot;)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"\"\"","external_name":"message","restriction":"String | ::Nil"}],"args_string":"(message : String? = <span class=\"s\">&quot;&quot;</span>)","args_html":"(message : String? = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":4,"url":null},"def":{"name":"new","args":[{"name":"message","doc":null,"default_value":"\"\"","external_name":"message","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"message:String?-instance-method","html_id":"message:String?-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":2,"url":null},"def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@message"}}],"macros":[],"types":[{"html_id":"rethinkdb-orm/RethinkORM/Error/ChangefeedClosed","path":"RethinkORM/Error/ChangefeedClosed.html","kind":"class","full_name":"RethinkORM::Error::ChangefeedClosed","name":"ChangefeedClosed","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":8,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Error/ConnectError","path":"RethinkORM/Error/ConnectError.html","kind":"class","full_name":"RethinkORM::Error::ConnectError","name":"ConnectError","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":58,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Error/DatabaseError","path":"RethinkORM/Error/DatabaseError.html","kind":"class","full_name":"RethinkORM::Error::DatabaseError","name":"DatabaseError","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":55,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentExists","path":"RethinkORM/Error/DocumentExists.html","kind":"class","full_name":"RethinkORM::Error::DocumentExists","name":"DocumentExists","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":11,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentInvalid","path":"RethinkORM/Error/DocumentInvalid.html","kind":"class","full_name":"RethinkORM::Error::DocumentInvalid","name":"DocumentInvalid","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":17,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(model,message=nil)-class-method","html_id":"new(model,message=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":""}],"args_string":"(model, message = <span class=\"n\">nil</span>)","args_html":"(model, message = <span class=\"n\">nil</span>)","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":21,"url":null},"def":{"name":"new","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(model, message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"errors:Array(NamedTuple())-instance-method","html_id":"errors:Array(NamedTuple())-instance-method","name":"errors","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(NamedTuple())","args_html":" : Array(NamedTuple())","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":19,"url":null},"def":{"name":"errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(NamedTuple(field: Symbol, message: String))","visibility":"Public","body":"@errors"}},{"id":"inspect_errors-instance-method","html_id":"inspect_errors-instance-method","name":"inspect_errors","doc":null,"summary":"<p><span class=\"flag red\">DEPRECATED</span>  Use <code><a href=\"../../RethinkORM/Error/DocumentInvalid.html#errors:Array(NamedTuple())-instance-method\">#errors</a></code> instead</p>\n\n","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":47,"url":null},"def":{"name":"inspect_errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"errors"}},{"id":"model:RethinkORM::Base-instance-method","html_id":"model:RethinkORM::Base-instance-method","name":"model","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : RethinkORM::Base","args_html":" : <a href=\"../../RethinkORM/Base.html\">RethinkORM::Base</a>","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":18,"url":null},"def":{"name":"model","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"RethinkORM::Base","visibility":"Public","body":"@model"}}],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentNotFound","path":"RethinkORM/Error/DocumentNotFound.html","kind":"class","full_name":"RethinkORM::Error::DocumentNotFound","name":"DocumentNotFound","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":14,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Error/DocumentNotSaved","path":"RethinkORM/Error/DocumentNotSaved.html","kind":"class","full_name":"RethinkORM::Error::DocumentNotSaved","name":"DocumentNotSaved","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":52,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockInvalidOp","path":"RethinkORM/Error/LockInvalidOp.html","kind":"class","full_name":"RethinkORM::Error::LockInvalidOp","name":"LockInvalidOp","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":61,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(key:String,locked:Bool)-class-method","html_id":"new(key:String,locked:Bool)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"locked","doc":null,"default_value":"","external_name":"locked","restriction":"Bool"}],"args_string":"(key : String, locked : Bool)","args_html":"(key : String, locked : Bool)","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":62,"url":null},"def":{"name":"new","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"locked","doc":null,"default_value":"","external_name":"locked","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key, locked)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockLost","path":"RethinkORM/Error/LockLost.html","kind":"class","full_name":"RethinkORM::Error::LockLost","name":"LockLost","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":67,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(key:String)-class-method","html_id":"new(key:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : String)","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":68,"url":null},"def":{"name":"new","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Error/LockUnavailable","path":"RethinkORM/Error/LockUnavailable.html","kind":"class","full_name":"RethinkORM::Error::LockUnavailable","name":"LockUnavailable","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},{"html_id":"rethinkdb-orm/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/error.cr","line_number":73,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Error","kind":"class","full_name":"RethinkORM::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(key:String)-class-method","html_id":"new(key:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : String)","location":{"filename":"src/rethinkdb-orm/error.cr","line_number":74,"url":null},"def":{"name":"new","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"rethinkdb-orm/RethinkORM/IdGenerator","path":"RethinkORM/IdGenerator.html","kind":"class","full_name":"RethinkORM::IdGenerator","name":"IdGenerator","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/utils/id_generator.cr","line_number":5,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"BASE_65","name":"BASE_65","value":"['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '-', '_', '~']","doc":null,"summary":null},{"id":"TIME_OFFSET","name":"TIME_OFFSET","value":"1388534400_i64","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[{"id":"base_encode(number,base)-class-method","html_id":"base_encode(number,base)-class-method","name":"base_encode","doc":"Converts a string of base10 digits to string in arbitrary base","summary":"<p>Converts a string of base10 digits to string in arbitrary base</p>","abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":""},{"name":"base","doc":null,"default_value":"","external_name":"base","restriction":""}],"args_string":"(number, base)","args_html":"(number, base)","location":{"filename":"src/rethinkdb-orm/utils/id_generator.cr","line_number":31,"url":null},"def":{"name":"base_encode","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":""},{"name":"base","doc":null,"default_value":"","external_name":"base","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"base_size = base.size\nif number.is_a?(String)\n  number = BigInt.new(number)\nend\nconverted = [] of Char\nwhile !number.zero?\n  number, digit = number.divmod(base_size)\n  converted.push(base[digit])\nend\nif converted.empty?\n  converted << base.first\nend\nconverted.reverse.join\n"}},{"id":"next(table_name:String)-class-method","html_id":"next(table_name:String)-class-method","name":"next","doc":null,"summary":null,"abstract":false,"args":[{"name":"table_name","doc":null,"default_value":"","external_name":"table_name","restriction":"String"}],"args_string":"(table_name : String)","args_html":"(table_name : String)","location":{"filename":"src/rethinkdb-orm/utils/id_generator.cr","line_number":17,"url":null},"def":{"name":"next","args":[{"name":"table_name","doc":null,"default_value":"","external_name":"table_name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"#{table_name}-#{postfix}\""}},{"id":"next(model)-class-method","html_id":"next(model)-class-method","name":"next","doc":"Generate a time-sortable and unique (with high probability) primary key","summary":"<p>Generate a time-sortable and unique (with high probability) primary key</p>","abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"args_string":"(model)","args_html":"(model)","location":{"filename":"src/rethinkdb-orm/utils/id_generator.cr","line_number":13,"url":null},"def":{"name":"next","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"#{model.table_name}-#{postfix}\""}},{"id":"postfix-class-method","html_id":"postfix-class-method","name":"postfix","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/utils/id_generator.cr","line_number":21,"url":null},"def":{"name":"postfix","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"time = Time.utc\ntimestamp = ((time.to_unix - TIME_OFFSET) * 1000000) + time.nanosecond\nrandom_tail = ((Random.rand(99999)) + 1).to_s.rjust(5, '0')\nbase_encode(\"#{timestamp}#{random_tail}\", BASE_65)\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Index","path":"RethinkORM/Index.html","kind":"module","full_name":"RethinkORM::Index","name":"Index","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/rethinkdb-orm/index.cr","line_number":1,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"secondary_index(field)-macro","html_id":"secondary_index(field)-macro","name":"secondary_index","doc":"TODO: Add support for compound and multi indices","summary":"<p><span class=\"flag orange\">TODO</span>  Add support for compound and multi indices</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""}],"args_string":"(field)","location":{"filename":"src/rethinkdb-orm/index.cr","line_number":3,"url":null},"def":{"name":"secondary_index","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    RethinkORM::Base::INDICES << \n{ field: \n{{ field.id.stringify }}\n, table: @@table_name }\n  \n"}}],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Lock","path":"RethinkORM/Lock.html","kind":"class","full_name":"RethinkORM::Lock","name":"Lock","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"},{"html_id":"rethinkdb-orm/RethinkORM/Validators","kind":"module","full_name":"RethinkORM::Validators","name":"Validators"},{"html_id":"rethinkdb-orm/RethinkORM/Table","kind":"module","full_name":"RethinkORM::Table","name":"Table"},{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"},{"html_id":"rethinkdb-orm/RethinkORM/Persistence","kind":"module","full_name":"RethinkORM::Persistence","name":"Persistence"},{"html_id":"rethinkdb-orm/RethinkORM/Index","kind":"module","full_name":"RethinkORM::Index","name":"Index"},{"html_id":"rethinkdb-orm/RethinkORM/Associations","kind":"module","full_name":"RethinkORM::Associations","name":"Associations"},{"html_id":"rethinkdb-orm/ActiveModel/Callbacks","kind":"module","full_name":"ActiveModel::Callbacks","name":"Callbacks"},{"html_id":"rethinkdb-orm/ActiveModel/Validation","kind":"module","full_name":"ActiveModel::Validation","name":"Validation"},{"html_id":"rethinkdb-orm/ActiveModel/Model","kind":"class","full_name":"ActiveModel::Model","name":"Model"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"CALLBACKS","name":"CALLBACKS","value":"{before_save: [] of Nil, after_save: [] of Nil, before_create: [] of Nil, after_create: [] of Nil, before_update: [] of Nil, after_update: [] of Nil, before_destroy: [] of Nil, after_destroy: [] of Nil}","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>"}],"included_modules":[],"extended_modules":[{"html_id":"rethinkdb-orm/RethinkORM/Settings","kind":"module","full_name":"RethinkORM::Settings","name":"Settings"}],"subclasses":[{"html_id":"rethinkdb-orm/RethinkORM/Lock/Reentrant","kind":"class","full_name":"RethinkORM::Lock::Reentrant","name":"Reentrant"}],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","class_methods":[{"id":"attributes:Array(Symbol)-class-method","html_id":"attributes:Array(Symbol)-class-method","name":"attributes","doc":"Returns all attribute keys.","summary":"<p>Returns all attribute keys.</p>","abstract":false,"args":[],"args_string":" : Array(Symbol)","args_html":" : Array(Symbol)","location":null,"def":{"name":"attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Symbol)","visibility":"Public","body":"[:id, :key, :instance_token, :expires_at]"}},{"id":"expired-class-method","html_id":"expired-class-method","name":"expired","doc":"Returns all expired locks\n","summary":"<p>Returns all expired locks </p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":44,"url":null},"def":{"name":"expired","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lock.where do |d|\n  (r.epoch_time(d[:expires_at])) < r.now\nend"}},{"id":"find(key)-class-method","html_id":"find(key)-class-method","name":"find","doc":"Hash a key\n","summary":"<p>Hash a key </p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":52,"url":null},"def":{"name":"find","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super(Digest::SHA1.base64digest(key.to_s))"}},{"id":"table_name-class-method","html_id":"table_name-class-method","name":"table_name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"table_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@table_name"}}],"constructors":[{"id":"from_trusted_json(string_or_io:String|IO):self-class-method","html_id":"from_trusted_json(string_or_io:String|IO):self-class-method","name":"from_trusted_json","doc":"Serialize from a trusted JSON source","summary":"<p>Serialize from a trusted JSON source</p>","abstract":false,"args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"}],"args_string":"(string_or_io : String | IO) : <span class=\"k\">self</span>","args_html":"(string_or_io : String | IO) : <span class=\"k\">self</span>","location":null,"def":{"name":"from_trusted_json","args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"RethinkORM::Lock.new(::JSON::PullParser.new(string_or_io), true)"}},{"id":"from_trusted_yaml(string_or_io:String|IO):self-class-method","html_id":"from_trusted_yaml(string_or_io:String|IO):self-class-method","name":"from_trusted_yaml","doc":"Serialize from a trusted YAML source","summary":"<p>Serialize from a trusted YAML source</p>","abstract":false,"args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"}],"args_string":"(string_or_io : String | IO) : <span class=\"k\">self</span>","args_html":"(string_or_io : String | IO) : <span class=\"k\">self</span>","location":null,"def":{"name":"from_trusted_yaml","args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"ctx = YAML::ParseContext.new\nnode = (begin\n  document = YAML::Nodes.parse(string_or_io)\n  document.nodes.first? || (begin\n    scalar = YAML::Nodes::Scalar.new(\"\")\n    scalar.style = YAML::ScalarStyle::PLAIN\n    scalar\n  end)\nend)\nRethinkORM::Lock.new(ctx, node, nil, true)\n"}},{"id":"new(key:String,expire:Time::Span?=nil,timeout:Time::Span?=nil,instance_token:String=Lock.new_instance_token)-class-method","html_id":"new(key:String,expire:Time::Span?=nil,timeout:Time::Span?=nil,instance_token:String=Lock.new_instance_token)-class-method","name":"new","doc":"Reset instance token if it's loaded and expired?","summary":"<p>Reset instance token if it's loaded and expired?</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"expire","doc":null,"default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"},{"name":"timeout","doc":null,"default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"},{"name":"instance_token","doc":null,"default_value":"Lock.new_instance_token","external_name":"instance_token","restriction":"String"}],"args_string":"(key : String, expire : Time::Span? = <span class=\"n\">nil</span>, timeout : Time::Span? = <span class=\"n\">nil</span>, instance_token : String = <span class=\"t\">Lock</span>.new_instance_token)","args_html":"(key : String, expire : Time::Span? = <span class=\"n\">nil</span>, timeout : Time::Span? = <span class=\"n\">nil</span>, instance_token : String = <span class=\"t\">Lock</span>.new_instance_token)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"expire","doc":null,"default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"},{"name":"timeout","doc":null,"default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"},{"name":"instance_token","doc":null,"default_value":"Lock.new_instance_token","external_name":"instance_token","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key, expire, timeout, instance_token)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"ctx","doc":null,"default_value":"","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":null,"def":{"name":"new","args":[{"name":"ctx","doc":null,"default_value":"","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"YAML::Nodes::Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ctx.read_alias(node, {{ @type }}) do |obj|\n  return obj\nend\ninstance = allocate\nctx.record_anchor(node, instance)\ninstance.initialize(ctx, node, nil)\nif instance.responds_to?(:finalize)\n  GC.add_finalizer(instance)\nend\ninstance\n"}},{"id":"new(id:String??=nil,key:String?=nil,instance_token:String?=nil,expires_at:Time?=nil)-class-method","html_id":"new(id:String??=nil,key:String?=nil,instance_token:String?=nil,expires_at:Time?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"String | Nil | Nil"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | Nil"},{"name":"instance_token","doc":null,"default_value":"nil","external_name":"instance_token","restriction":"String | Nil"},{"name":"expires_at","doc":null,"default_value":"nil","external_name":"expires_at","restriction":"Time | Nil"}],"args_string":"(id : String?? = <span class=\"n\">nil</span>, key : String? = <span class=\"n\">nil</span>, instance_token : String? = <span class=\"n\">nil</span>, expires_at : Time? = <span class=\"n\">nil</span>)","args_html":"(id : String?? = <span class=\"n\">nil</span>, key : String? = <span class=\"n\">nil</span>, instance_token : String? = <span class=\"n\">nil</span>, expires_at : Time? = <span class=\"n\">nil</span>)","location":null,"def":{"name":"new","args":[{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"String | Nil | Nil"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | Nil"},{"name":"instance_token","doc":null,"default_value":"nil","external_name":"instance_token","restriction":"String | Nil"},{"name":"expires_at","doc":null,"default_value":"nil","external_name":"expires_at","restriction":"Time | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(id, key, instance_token, expires_at)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-class-method","html_id":"new(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-class-method","name":"new","doc":"Initialize RethinkORM::Lock from `HTTP::Params`.","summary":"<p>Initialize RethinkORM::Lock from <code>HTTP::Params</code>.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"args_string":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","args_html":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","location":null,"def":{"name":"new","args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"after_create-instance-method","html_id":"after_create-instance-method","name":"after_create","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"after_create","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__after_create"}},{"id":"after_destroy-instance-method","html_id":"after_destroy-instance-method","name":"after_destroy","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"after_destroy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__after_destroy"}},{"id":"after_save-instance-method","html_id":"after_save-instance-method","name":"after_save","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"after_save","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__after_save"}},{"id":"after_update-instance-method","html_id":"after_update-instance-method","name":"after_update","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"after_update","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__after_update"}},{"id":"apply_defaults-instance-method","html_id":"apply_defaults-instance-method","name":"apply_defaults","doc":"Generate code to apply default values","summary":"<p>Generate code to apply default values</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"apply_defaults","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}},{"id":"assign_attributes(id:String?|Missing=Missing,key:String|Missing=Missing,instance_token:String|Missing=Missing,expires_at:Time|Missing=Missing)-instance-method","html_id":"assign_attributes(id:String?|Missing=Missing,key:String|Missing=Missing,instance_token:String|Missing=Missing,expires_at:Time|Missing=Missing)-instance-method","name":"assign_attributes","doc":"Assign to multiple attributes.","summary":"<p>Assign to multiple attributes.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"},{"name":"key","doc":null,"default_value":"Missing","external_name":"key","restriction":"String | Missing"},{"name":"instance_token","doc":null,"default_value":"Missing","external_name":"instance_token","restriction":"String | Missing"},{"name":"expires_at","doc":null,"default_value":"Missing","external_name":"expires_at","restriction":"Time | Missing"}],"args_string":"(id : String? | Missing = <span class=\"t\">Missing</span>, key : String | Missing = <span class=\"t\">Missing</span>, instance_token : String | Missing = <span class=\"t\">Missing</span>, expires_at : Time | Missing = <span class=\"t\">Missing</span>)","args_html":"(id : String? | Missing = <span class=\"t\">Missing</span>, key : String | Missing = <span class=\"t\">Missing</span>, instance_token : String | Missing = <span class=\"t\">Missing</span>, expires_at : Time | Missing = <span class=\"t\">Missing</span>)","location":null,"def":{"name":"assign_attributes","args":[{"name":"id","doc":null,"default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"},{"name":"key","doc":null,"default_value":"Missing","external_name":"key","restriction":"String | Missing"},{"name":"instance_token","doc":null,"default_value":"Missing","external_name":"instance_token","restriction":"String | Missing"},{"name":"expires_at","doc":null,"default_value":"Missing","external_name":"expires_at","restriction":"Time | Missing"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if key.is_a?(Missing)\nelse\n  self.key = key\nend\nif instance_token.is_a?(Missing)\nelse\n  self.instance_token = instance_token\nend\nif expires_at.is_a?(Missing)\nelse\n  self.expires_at = expires_at\nend\n"}},{"id":"assign_attributes(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-instance-method","html_id":"assign_attributes(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-instance-method","name":"assign_attributes","doc":"Assign to mulitple attributes via `HTTP::Params`.","summary":"<p>Assign to mulitple attributes via <code>HTTP::Params</code>.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"args_string":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","args_html":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","location":null,"def":{"name":"assign_attributes","args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__from_object_params__(params)\nself\n"}},{"id":"assign_attributes_from_json(json)-instance-method","html_id":"assign_attributes_from_json(json)-instance-method","name":"assign_attributes_from_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":""}],"args_string":"(json)","args_html":"(json)","location":null,"def":{"name":"assign_attributes_from_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_json(json)\ndata = (JSON.parse(json)).as_h\nif (data.has_key?(\"key\")) && (self.key != model.key)\n  self.key = model.key\nend\nif (data.has_key?(\"instance_token\")) && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif (data.has_key?(\"expires_at\")) && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"id":"assign_attributes_from_trusted_json(json)-instance-method","html_id":"assign_attributes_from_trusted_json(json)-instance-method","name":"assign_attributes_from_trusted_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":""}],"args_string":"(json)","args_html":"(json)","location":null,"def":{"name":"assign_attributes_from_trusted_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_trusted_json(json)\ndata = (JSON.parse(json)).as_h\nif (data.has_key?(\"id\")) && (self.id != model.id)\n  self.id = model.id\nend\nif (data.has_key?(\"key\")) && (self.key != model.key)\n  self.key = model.key\nend\nif (data.has_key?(\"instance_token\")) && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif (data.has_key?(\"expires_at\")) && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"id":"assign_attributes_from_trusted_yaml(yaml)-instance-method","html_id":"assign_attributes_from_trusted_yaml(yaml)-instance-method","name":"assign_attributes_from_trusted_yaml","doc":null,"summary":null,"abstract":false,"args":[{"name":"yaml","doc":null,"default_value":"","external_name":"yaml","restriction":""}],"args_string":"(yaml)","args_html":"(yaml)","location":null,"def":{"name":"assign_attributes_from_trusted_yaml","args":[{"name":"yaml","doc":null,"default_value":"","external_name":"yaml","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (yaml.responds_to?(:read_remaining)) && (yaml.responds_to?(:read_string))\n  yaml = yaml.read_string(yaml.read_remaining)\nend\nmodel = self.class.from_trusted_yaml(yaml)\ndata = (YAML.parse(yaml)).as_h\nif (data.has_key?(\"id\")) && (self.id != model.id)\n  self.id = model.id\nend\nif (data.has_key?(\"key\")) && (self.key != model.key)\n  self.key = model.key\nend\nif (data.has_key?(\"instance_token\")) && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif (data.has_key?(\"expires_at\")) && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"id":"assign_attributes_from_yaml(yaml)-instance-method","html_id":"assign_attributes_from_yaml(yaml)-instance-method","name":"assign_attributes_from_yaml","doc":"Uses the YAML parser as JSON is valid YAML","summary":"<p>Uses the YAML parser as JSON is valid YAML</p>","abstract":false,"args":[{"name":"yaml","doc":null,"default_value":"","external_name":"yaml","restriction":""}],"args_string":"(yaml)","args_html":"(yaml)","location":null,"def":{"name":"assign_attributes_from_yaml","args":[{"name":"yaml","doc":null,"default_value":"","external_name":"yaml","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (yaml.responds_to?(:read_remaining)) && (yaml.responds_to?(:read_string))\n  yaml = yaml.read_string(yaml.read_remaining)\nend\nmodel = self.class.from_yaml(yaml)\ndata = (YAML.parse(yaml)).as_h\nif (data.has_key?(\"key\")) && (self.key != model.key)\n  self.key = model.key\nend\nif (data.has_key?(\"instance_token\")) && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif (data.has_key?(\"expires_at\")) && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"id":"attributes-instance-method","html_id":"attributes-instance-method","name":"attributes","doc":"Returns a `Hash` of all attribute values","summary":"<p>Returns a <code>Hash</code> of all attribute values</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{:id => @id, :key => @key, :instance_token => @instance_token, :expires_at => @expires_at}"}},{"id":"attributes_tuple-instance-method","html_id":"attributes_tuple-instance-method","name":"attributes_tuple","doc":"Returns a `NamedTuple` of all attribute values.","summary":"<p>Returns a <code>NamedTuple</code> of all attribute values.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"attributes_tuple","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{id: @id, key: @key, instance_token: @instance_token, expires_at: @expires_at}"}},{"id":"before_create-instance-method","html_id":"before_create-instance-method","name":"before_create","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"before_create","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_create"}},{"id":"before_destroy-instance-method","html_id":"before_destroy-instance-method","name":"before_destroy","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"before_destroy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_destroy"}},{"id":"before_save-instance-method","html_id":"before_save-instance-method","name":"before_save","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"before_save","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_save"}},{"id":"before_update-instance-method","html_id":"before_update-instance-method","name":"before_update","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"before_update","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_update"}},{"id":"changed?-instance-method","html_id":"changed?-instance-method","name":"changed?","doc":"Check if any attributes have changed.","summary":"<p>Check if any attributes have changed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"modified = false\nif @id_changed\n  modified = true\nend\nif @key_changed\n  modified = true\nend\nif @instance_token_changed\n  modified = true\nend\nif @expires_at_changed\n  modified = true\nend\nmodified\n"}},{"id":"changed_attributes-instance-method","html_id":"changed_attributes-instance-method","name":"changed_attributes","doc":"Returns a `Hash` with all changed attributes.","summary":"<p>Returns a <code>Hash</code> with all changed attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"changed_attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"all = attributes\nif @id_changed\nelse\n  all.delete(:id)\nend\nif @key_changed\nelse\n  all.delete(:key)\nend\nif @instance_token_changed\nelse\n  all.delete(:instance_token)\nend\nif @expires_at_changed\nelse\n  all.delete(:expires_at)\nend\nall\n"}},{"id":"changed_json:String-instance-method","html_id":"changed_json:String-instance-method","name":"changed_json","doc":"Serialize the set of changed attributes to JSON.","summary":"<p>Serialize the set of changed attributes to JSON.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"changed_json","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |string|\n  changed_json(string)\nend"}},{"id":"changed_json(io:IO):Nil-instance-method","html_id":"changed_json(io:IO):Nil-instance-method","name":"changed_json","doc":"Serialize the set of changed attributes to JSON.","summary":"<p>Serialize the set of changed attributes to JSON.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":null,"def":{"name":"changed_json","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"all = (JSON.parse(self.to_json)).as_h\nif @id_changed\nelse\n  all.delete(\"id\")\nend\nif @key_changed\nelse\n  all.delete(\"key\")\nend\nif @instance_token_changed\nelse\n  all.delete(\"instance_token\")\nend\nif @expires_at_changed\nelse\n  all.delete(\"expires_at\")\nend\nall.to_json(io)\n"}},{"id":"changed_yaml:String-instance-method","html_id":"changed_yaml:String-instance-method","name":"changed_yaml","doc":"Serialize the set of changed attributes to YAML.","summary":"<p>Serialize the set of changed attributes to YAML.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"changed_yaml","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |string|\n  changed_yaml(string)\nend"}},{"id":"changed_yaml(io:IO):Nil-instance-method","html_id":"changed_yaml(io:IO):Nil-instance-method","name":"changed_yaml","doc":"Serialize the set of changed attributes to YAML.","summary":"<p>Serialize the set of changed attributes to YAML.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":null,"def":{"name":"changed_yaml","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"all = (JSON.parse(self.to_json)).as_h\nif @id_changed\nelse\n  all.delete(\"id\")\nend\nif @key_changed\nelse\n  all.delete(\"key\")\nend\nif @instance_token_changed\nelse\n  all.delete(\"instance_token\")\nend\nif @expires_at_changed\nelse\n  all.delete(\"expires_at\")\nend\nall.to_yaml(io)\n"}},{"id":"clear_changes_information-instance-method","html_id":"clear_changes_information-instance-method","name":"clear_changes_information","doc":"Reset changes for all attributes.","summary":"<p>Reset changes for all attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"clear_changes_information","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id_changed = false\n@id_was = nil\n@key_changed = false\n@key_was = nil\n@instance_token_changed = false\n@instance_token_was = nil\n@expires_at_changed = false\n@expires_at_was = nil\nnil\n"}},{"id":"expire:Time::Span-instance-method","html_id":"expire:Time::Span-instance-method","name":"expire","doc":"Seconds before the lock expires","summary":"<p>Seconds before the lock expires</p>","abstract":false,"args":[],"args_string":" : Time::Span","args_html":" : Time::Span","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":36,"url":null},"def":{"name":"expire","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span","visibility":"Public","body":"@expire"}},{"id":"expire=(expire:Time::Span)-instance-method","html_id":"expire=(expire:Time::Span)-instance-method","name":"expire=","doc":"Seconds before the lock expires","summary":"<p>Seconds before the lock expires</p>","abstract":false,"args":[{"name":"expire","doc":null,"default_value":"","external_name":"expire","restriction":"Time::Span"}],"args_string":"(expire : Time::Span)","args_html":"(expire : Time::Span)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":36,"url":null},"def":{"name":"expire=","args":[{"name":"expire","doc":null,"default_value":"","external_name":"expire","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@expire = expire"}},{"id":"expires_at:Time-instance-method","html_id":"expires_at:Time-instance-method","name":"expires_at","doc":"`expires_at` getter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#expires_at:Time-instance-method\">#expires_at</a></code> getter</p>","abstract":false,"args":[],"args_string":" : Time","args_html":" : Time","location":null,"def":{"name":"expires_at","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time","visibility":"Public","body":"__temp_77 = @expires_at\nif __temp_77.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock#expires_at : Time\"))\nend\n__temp_77\n"}},{"id":"expires_at=(value:Time)-instance-method","html_id":"expires_at=(value:Time)-instance-method","name":"expires_at=","doc":"`expires_at` setter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#expires_at:Time-instance-method\">#expires_at</a></code> setter</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"}],"args_string":"(value : Time)","args_html":"(value : Time)","location":null,"def":{"name":"expires_at=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!@expires_at_changed) && (@expires_at != value)\n  @expires_at_changed = true\n  @expires_at_was = @expires_at\nend\n@expires_at = value\n"}},{"id":"expires_at_change-instance-method","html_id":"expires_at_change-instance-method","name":"expires_at_change","doc":"Returns `{ expires_at_was, expires_at }` if `expires_at` has changed.","summary":"<p>Returns <code>{ expires_at_was, expires_at }</code> if <code><a href=\"../RethinkORM/Lock.html#expires_at:Time-instance-method\">#expires_at</a></code> has changed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"expires_at_change","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @expires_at_changed\n  {@expires_at_was, @expires_at}\nelse\n  nil\nend"}},{"id":"expires_at_changed?-instance-method","html_id":"expires_at_changed?-instance-method","name":"expires_at_changed?","doc":"Check if `expires_at` is in the set of changed attributes.","summary":"<p>Check if <code><a href=\"../RethinkORM/Lock.html#expires_at:Time-instance-method\">#expires_at</a></code> is in the set of changed attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"expires_at_changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!@expires_at_changed)"}},{"id":"expires_at_default:Time-instance-method","html_id":"expires_at_default:Time-instance-method","name":"expires_at_default","doc":"`expires_at`'s default value","summary":"<p><code><a href=\"../RethinkORM/Lock.html#expires_at:Time-instance-method\">#expires_at</a></code>'s default value</p>","abstract":false,"args":[],"args_string":" : Time","args_html":" : Time","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":27,"url":null},"def":{"name":"expires_at_default","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time","visibility":"Public","body":"raise(NilAssertionError.new(\"No default for RethinkORM::Lock#expires_at\"))"}},{"id":"expires_at_was:Time?-instance-method","html_id":"expires_at_was:Time?-instance-method","name":"expires_at_was","doc":"Returns the previous value of `expires_at`.","summary":"<p>Returns the previous value of <code><a href=\"../RethinkORM/Lock.html#expires_at:Time-instance-method\">#expires_at</a></code>.</p>","abstract":false,"args":[],"args_string":" : Time?","args_html":" : Time?","location":null,"def":{"name":"expires_at_was","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@expires_at_was"}},{"id":"expires_at_will_change!-instance-method","html_id":"expires_at_will_change!-instance-method","name":"expires_at_will_change!","doc":"Include `expires_at` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../RethinkORM/Lock.html#expires_at:Time-instance-method\">#expires_at</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"expires_at_will_change!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@expires_at_changed = true\n@expires_at_was = @expires_at.dup\n"}},{"id":"id:String?-instance-method","html_id":"id:String?-instance-method","name":"id","doc":"`id` getter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#id:String?-instance-method\">#id</a></code> getter</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":null,"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | Nil","visibility":"Public","body":"@id"}},{"id":"id=(value:String?)-instance-method","html_id":"id=(value:String?)-instance-method","name":"id=","doc":"Override the map json\n`id` setter","summary":"<p>Override the map json <code><a href=\"../RethinkORM/Lock.html#id:String?-instance-method\">#id</a></code> setter</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String | Nil"}],"args_string":"(value : String?)","args_html":"(value : String?)","location":null,"def":{"name":"id=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!@id_changed) && (@id != value)\n  @id_changed = true\n  @id_was = @id\nend\n@id = value\n"}},{"id":"id_change-instance-method","html_id":"id_change-instance-method","name":"id_change","doc":"Returns `{ id_was, id }` if `id` has changed.","summary":"<p>Returns <code>{ id_was, id }</code> if <code><a href=\"../RethinkORM/Lock.html#id:String?-instance-method\">#id</a></code> has changed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"id_change","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @id_changed\n  {@id_was, @id}\nelse\n  nil\nend"}},{"id":"id_changed?-instance-method","html_id":"id_changed?-instance-method","name":"id_changed?","doc":"Check if `id` is in the set of changed attributes.","summary":"<p>Check if <code><a href=\"../RethinkORM/Lock.html#id:String?-instance-method\">#id</a></code> is in the set of changed attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"id_changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!@id_changed)"}},{"id":"id_default:String?-instance-method","html_id":"id_default:String?-instance-method","name":"id_default","doc":"`id`'s default value","summary":"<p><code><a href=\"../RethinkORM/Lock.html#id:String?-instance-method\">#id</a></code>'s default value</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":20,"url":null},"def":{"name":"id_default","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"nil"}},{"id":"id_was:String?-instance-method","html_id":"id_was:String?-instance-method","name":"id_was","doc":"Returns the previous value of `id`.","summary":"<p>Returns the previous value of <code><a href=\"../RethinkORM/Lock.html#id:String?-instance-method\">#id</a></code>.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":null,"def":{"name":"id_was","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id_was"}},{"id":"id_will_change!-instance-method","html_id":"id_will_change!-instance-method","name":"id_will_change!","doc":"Include `id` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../RethinkORM/Lock.html#id:String?-instance-method\">#id</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"id_will_change!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id_changed = true\n@id_was = @id.dup\n"}},{"id":"instance_token:String-instance-method","html_id":"instance_token:String-instance-method","name":"instance_token","doc":"`instance_token` getter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#instance_token:String-instance-method\">#instance_token</a></code> getter</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"instance_token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"__temp_77 = @instance_token\nif __temp_77.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock#instance_token : String\"))\nend\n__temp_77\n"}},{"id":"instance_token=(value:String)-instance-method","html_id":"instance_token=(value:String)-instance-method","name":"instance_token=","doc":"`instance_token` setter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#instance_token:String-instance-method\">#instance_token</a></code> setter</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","location":null,"def":{"name":"instance_token=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!@instance_token_changed) && (@instance_token != value)\n  @instance_token_changed = true\n  @instance_token_was = @instance_token\nend\n@instance_token = value\n"}},{"id":"instance_token_change-instance-method","html_id":"instance_token_change-instance-method","name":"instance_token_change","doc":"Returns `{ instance_token_was, instance_token }` if `instance_token` has changed.","summary":"<p>Returns <code>{ instance_token_was, instance_token }</code> if <code><a href=\"../RethinkORM/Lock.html#instance_token:String-instance-method\">#instance_token</a></code> has changed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"instance_token_change","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @instance_token_changed\n  {@instance_token_was, @instance_token}\nelse\n  nil\nend"}},{"id":"instance_token_changed?-instance-method","html_id":"instance_token_changed?-instance-method","name":"instance_token_changed?","doc":"Check if `instance_token` is in the set of changed attributes.","summary":"<p>Check if <code><a href=\"../RethinkORM/Lock.html#instance_token:String-instance-method\">#instance_token</a></code> is in the set of changed attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"instance_token_changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!@instance_token_changed)"}},{"id":"instance_token_default:String-instance-method","html_id":"instance_token_default:String-instance-method","name":"instance_token_default","doc":"`instance_token`'s default value","summary":"<p><code><a href=\"../RethinkORM/Lock.html#instance_token:String-instance-method\">#instance_token</a></code>'s default value</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":25,"url":null},"def":{"name":"instance_token_default","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"raise(NilAssertionError.new(\"No default for RethinkORM::Lock#instance_token\"))"}},{"id":"instance_token_was:String?-instance-method","html_id":"instance_token_was:String?-instance-method","name":"instance_token_was","doc":"Returns the previous value of `instance_token`.","summary":"<p>Returns the previous value of <code><a href=\"../RethinkORM/Lock.html#instance_token:String-instance-method\">#instance_token</a></code>.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":null,"def":{"name":"instance_token_was","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@instance_token_was"}},{"id":"instance_token_will_change!-instance-method","html_id":"instance_token_will_change!-instance-method","name":"instance_token_will_change!","doc":"Include `instance_token` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../RethinkORM/Lock.html#instance_token:String-instance-method\">#instance_token</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"instance_token_will_change!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@instance_token_changed = true\n@instance_token_was = @instance_token.dup\n"}},{"id":"key:String-instance-method","html_id":"key:String-instance-method","name":"key","doc":"`key` getter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#key:String-instance-method\">#key</a></code> getter</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"__temp_77 = @key\nif __temp_77.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock#key : String\"))\nend\n__temp_77\n"}},{"id":"key=(value:String)-instance-method","html_id":"key=(value:String)-instance-method","name":"key=","doc":"`key` setter","summary":"<p><code><a href=\"../RethinkORM/Lock.html#key:String-instance-method\">#key</a></code> setter</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","location":null,"def":{"name":"key=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!@key_changed) && (@key != value)\n  @key_changed = true\n  @key_was = @key\nend\n@key = value\n"}},{"id":"key_change-instance-method","html_id":"key_change-instance-method","name":"key_change","doc":"Returns `{ key_was, key }` if `key` has changed.","summary":"<p>Returns <code>{ key_was, key }</code> if <code><a href=\"../RethinkORM/Lock.html#key:String-instance-method\">#key</a></code> has changed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"key_change","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @key_changed\n  {@key_was, @key}\nelse\n  nil\nend"}},{"id":"key_changed?-instance-method","html_id":"key_changed?-instance-method","name":"key_changed?","doc":"Check if `key` is in the set of changed attributes.","summary":"<p>Check if <code><a href=\"../RethinkORM/Lock.html#key:String-instance-method\">#key</a></code> is in the set of changed attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"key_changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!@key_changed)"}},{"id":"key_default:String-instance-method","html_id":"key_default:String-instance-method","name":"key_default","doc":"`key`'s default value","summary":"<p><code><a href=\"../RethinkORM/Lock.html#key:String-instance-method\">#key</a></code>'s default value</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":23,"url":null},"def":{"name":"key_default","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"raise(NilAssertionError.new(\"No default for RethinkORM::Lock#key\"))"}},{"id":"key_was:String?-instance-method","html_id":"key_was:String?-instance-method","name":"key_was","doc":"Returns the previous value of `key`.","summary":"<p>Returns the previous value of <code><a href=\"../RethinkORM/Lock.html#key:String-instance-method\">#key</a></code>.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":null,"def":{"name":"key_was","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@key_was"}},{"id":"key_will_change!-instance-method","html_id":"key_will_change!-instance-method","name":"key_will_change!","doc":"Include `key` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../RethinkORM/Lock.html#key:String-instance-method\">#key</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"key_will_change!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@key_changed = true\n@key_was = @key.dup\n"}},{"id":"lock(expire:Time::Span=self.expire,timeout:Time::Span=self.timeout)-instance-method","html_id":"lock(expire:Time::Span=self.expire,timeout:Time::Span=self.timeout)-instance-method","name":"lock","doc":null,"summary":null,"abstract":false,"args":[{"name":"expire","doc":null,"default_value":"self.expire","external_name":"expire","restriction":"Time::Span"},{"name":"timeout","doc":null,"default_value":"self.timeout","external_name":"timeout","restriction":"Time::Span"}],"args_string":"(expire : Time::Span = <span class=\"k\">self</span>.expire, timeout : Time::Span = <span class=\"k\">self</span>.timeout)","args_html":"(expire : Time::Span = <span class=\"k\">self</span>.expire, timeout : Time::Span = <span class=\"k\">self</span>.timeout)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":79,"url":null},"def":{"name":"lock","args":[{"name":"expire","doc":null,"default_value":"self.expire","external_name":"expire","restriction":"Time::Span"},{"name":"timeout","doc":null,"default_value":"self.timeout","external_name":"timeout","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sleep_amount = 0.1.seconds\nstart_at = Time.utc\nloop do\n  if try_lock(expire: expire)\n    return\n  end\n  if ((Time.utc - start_at) + sleep_amount) > timeout\n    raise(Error::LockUnavailable.new(key.as(String)))\n  end\n  sleep(sleep_amount)\n  sleep_amount = {1.seconds, sleep_amount * 2}.min\nend\n"}},{"id":"locked?:Bool-instance-method","html_id":"locked?:Bool-instance-method","name":"locked?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":40,"url":null},"def":{"name":"locked?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@locked"}},{"id":"persistent_attributes-instance-method","html_id":"persistent_attributes-instance-method","name":"persistent_attributes","doc":"Returns a `Hash` of all attributes that can be persisted.","summary":"<p>Returns a <code>Hash</code> of all attributes that can be persisted.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"persistent_attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{:id => @id, :key => @key, :instance_token => @instance_token, :expires_at => @expires_at}"}},{"id":"refresh(expire:Time::Span?=nil)-instance-method","html_id":"refresh(expire:Time::Span?=nil)-instance-method","name":"refresh","doc":null,"summary":null,"abstract":false,"args":[{"name":"expire","doc":null,"default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"}],"args_string":"(expire : Time::Span? = <span class=\"n\">nil</span>)","args_html":"(expire : Time::Span? = <span class=\"n\">nil</span>)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":140,"url":null},"def":{"name":"refresh","args":[{"name":"expire","doc":null,"default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if locked?\nelse\n  raise(Error::LockInvalidOp.new(locked: locked?, key: key.as(String)))\nend\nset_expiration(expire, use_previous: true)\nresult = Lock.table_query do |q|\n  (q.get(self.id)).update do |doc|\n    r.branch(doc[:instance_token].eq(self.instance_token), {:expires_at => expiry_epoch}, nil)\n  end\nend\nif result[\"replaced\"] == 1\nelse\n  @locked = false\n  raise(Error::LockLost.new(key.as(String)))\nend\n"}},{"id":"restore_attributes-instance-method","html_id":"restore_attributes-instance-method","name":"restore_attributes","doc":"Reset each attribute to their previous values and clears all changes.","summary":"<p>Reset each attribute to their previous values and clears all changes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"restore_attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @id_changed\n  @id = @id_was\nend\nif @key_changed\n  @key = @key_was\nend\nif @instance_token_changed\n  @instance_token = @instance_token_was\nend\nif @expires_at_changed\n  @expires_at = @expires_at_was\nend\nclear_changes_information\n"}},{"id":"run_create_callbacks(&)-instance-method","html_id":"run_create_callbacks(&)-instance-method","name":"run_create_callbacks","doc":"Wrap a block with callbacks for the appropriate crud operation","summary":"<p>Wrap a block with callbacks for the appropriate crud operation</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"run_create_callbacks","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_create\nresult = yield\n__after_create\nresult\n"}},{"id":"run_destroy_callbacks(&)-instance-method","html_id":"run_destroy_callbacks(&)-instance-method","name":"run_destroy_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"run_destroy_callbacks","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_destroy\nresult = yield\n__after_destroy\nresult\n"}},{"id":"run_save_callbacks(&)-instance-method","html_id":"run_save_callbacks(&)-instance-method","name":"run_save_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"run_save_callbacks","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_save\nresult = yield\n__after_save\nresult\n"}},{"id":"run_update_callbacks(&)-instance-method","html_id":"run_update_callbacks(&)-instance-method","name":"run_update_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":13,"url":null},"def":{"name":"run_update_callbacks","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_update\nresult = yield\n__after_update\nresult\n"}},{"id":"synchronize(**options,&)-instance-method","html_id":"synchronize(**options,&)-instance-method","name":"synchronize","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**options, &)","args_html":"(**options, &)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":70,"url":null},"def":{"name":"synchronize","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"lock(**options)\nbegin\n  yield\nensure\n  if locked?\n    unlock\n  end\nend\n"}},{"id":"table_name-instance-method","html_id":"table_name-instance-method","name":"table_name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"table_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@table_name"}},{"id":"timeout:Time::Span-instance-method","html_id":"timeout:Time::Span-instance-method","name":"timeout","doc":"Lock acquisition timeout","summary":"<p>Lock acquisition timeout</p>","abstract":false,"args":[],"args_string":" : Time::Span","args_html":" : Time::Span","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":38,"url":null},"def":{"name":"timeout","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span","visibility":"Public","body":"@timeout"}},{"id":"timeout=(timeout:Time::Span)-instance-method","html_id":"timeout=(timeout:Time::Span)-instance-method","name":"timeout=","doc":"Lock acquisition timeout","summary":"<p>Lock acquisition timeout</p>","abstract":false,"args":[{"name":"timeout","doc":null,"default_value":"","external_name":"timeout","restriction":"Time::Span"}],"args_string":"(timeout : Time::Span)","args_html":"(timeout : Time::Span)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":38,"url":null},"def":{"name":"timeout=","args":[{"name":"timeout","doc":null,"default_value":"","external_name":"timeout","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@timeout = timeout"}},{"id":"to_json(json:JSON::Builder)-instance-method","html_id":"to_json(json:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"::JSON::Builder"}],"args_string":"(json : JSON::Builder)","args_html":"(json : JSON::Builder)","location":null,"def":{"name":"to_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"::JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"json.object do\n  _id = @id\n  if _id.nil?\n  else\n    json.field(\"id\") do\n      _id.to_json(json)\n    end\n  end\n  _key = @key\n  if _key.nil?\n  else\n    json.field(\"key\") do\n      _key.to_json(json)\n    end\n  end\n  _instance_token = @instance_token\n  if _instance_token.nil?\n  else\n    json.field(\"instance_token\") do\n      if _instance_token\n        TokenRefresher.to_json(_instance_token, json)\n      else\n        nil.to_json(json)\n      end\n    end\n  end\n  _expires_at = @expires_at\n  if _expires_at.nil?\n  else\n    json.field(\"expires_at\") do\n      if _expires_at\n        FloatEpochConverter.to_json(_expires_at, json)\n      else\n        nil.to_json(json)\n      end\n    end\n  end\nend"}},{"id":"to_yaml(__temp_76:YAML::Nodes::Builder)-instance-method","html_id":"to_yaml(__temp_76:YAML::Nodes::Builder)-instance-method","name":"to_yaml","doc":null,"summary":null,"abstract":false,"args":[{"name":"__temp_76","doc":null,"default_value":"","external_name":"__temp_76","restriction":"::YAML::Nodes::Builder"}],"args_string":"(__temp_76 : YAML::Nodes::Builder)","args_html":"(__temp_76 : YAML::Nodes::Builder)","location":null,"def":{"name":"to_yaml","args":[{"name":"__temp_76","doc":null,"default_value":"","external_name":"__temp_76","restriction":"::YAML::Nodes::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__temp_76.mapping(reference: self) do\n  _id = @id\n  if _id.nil?\n  else\n    \"id\".to_yaml(__temp_76)\n    _id.to_yaml(__temp_76)\n  end\n  _key = @key\n  if _key.nil?\n  else\n    \"key\".to_yaml(__temp_76)\n    _key.to_yaml(__temp_76)\n  end\n  _instance_token = @instance_token\n  if _instance_token.nil?\n  else\n    \"instance_token\".to_yaml(__temp_76)\n    TokenRefresher.to_yaml(_instance_token, __temp_76)\n  end\n  _expires_at = @expires_at\n  if _expires_at.nil?\n  else\n    \"expires_at\".to_yaml(__temp_76)\n    FloatEpochConverter.to_yaml(_expires_at, __temp_76)\n  end\nend"}},{"id":"try_lock(expire:Time::Span=self.expire)-instance-method","html_id":"try_lock(expire:Time::Span=self.expire)-instance-method","name":"try_lock","doc":null,"summary":null,"abstract":false,"args":[{"name":"expire","doc":null,"default_value":"self.expire","external_name":"expire","restriction":"Time::Span"}],"args_string":"(expire : Time::Span = <span class=\"k\">self</span>.expire)","args_html":"(expire : Time::Span = <span class=\"k\">self</span>.expire)","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":92,"url":null},"def":{"name":"try_lock","args":[{"name":"expire","doc":null,"default_value":"self.expire","external_name":"expire","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if locked?\n  raise(Error::LockInvalidOp.new(locked: locked?, key: key.as(String)))\nend\nset_expiration(expire)\nresult = Lock.table_query do |q|\n  (q.get(self.id)).replace do |doc|\n    r.branch((doc.eq(nil)).or((r.epoch_time(doc[:expires_at])) < r.now), lock_attributes, doc)\n  end\nend\ninserted = result[\"inserted\"]?.try do |__arg0|\n  __arg0.raw.as(Int64)\nend\nreplaced = result[\"replaced\"]?.try do |__arg1|\n  __arg1.raw.as(Int64)\nend\n@locked = if inserted && replaced\n  (inserted + replaced) == 1\nelse\n  false\nend\n"}},{"id":"unlock-instance-method","html_id":"unlock-instance-method","name":"unlock","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock.cr","line_number":120,"url":null},"def":{"name":"unlock","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if locked?\nelse\n  raise(Error::LockInvalidOp.new(locked: locked?, key: key.as(String)))\nend\nresult = Lock.table_query do |q|\n  (q.get(self.id)).replace do |doc|\n    r.branch((doc[:instance_token].default(nil)).eq(self.instance_token), nil, doc)\n  end\nend\n@locked = false\nif result[\"deleted\"] == 1\nelse\n  raise(Error::LockLost.new(key.as(String)))\nend\n"}},{"id":"validate_nilability-instance-method","html_id":"validate_nilability-instance-method","name":"validate_nilability","doc":"Validate that all non-nillable fields have values.","summary":"<p>Validate that all non-nillable fields have values.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"validate_nilability","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @key.nil?\n  validation_error(:key, \"should not be nil\")\nend\nif @instance_token.nil?\n  validation_error(:instance_token, \"should not be nil\")\nend\nif @expires_at.nil?\n  validation_error(:expires_at, \"should not be nil\")\nend\n"}}],"macros":[],"types":[{"html_id":"rethinkdb-orm/RethinkORM/Lock/Reentrant","path":"RethinkORM/Lock/Reentrant.html","kind":"class","full_name":"RethinkORM::Lock::Reentrant","name":"Reentrant","abstract":false,"superclass":{"html_id":"rethinkdb-orm/RethinkORM/Lock","kind":"class","full_name":"RethinkORM::Lock","name":"Lock"},"ancestors":[{"html_id":"rethinkdb-orm/RethinkORM/Lock","kind":"class","full_name":"RethinkORM::Lock","name":"Lock"},{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"},{"html_id":"rethinkdb-orm/RethinkORM/Validators","kind":"module","full_name":"RethinkORM::Validators","name":"Validators"},{"html_id":"rethinkdb-orm/RethinkORM/Table","kind":"module","full_name":"RethinkORM::Table","name":"Table"},{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"},{"html_id":"rethinkdb-orm/RethinkORM/Persistence","kind":"module","full_name":"RethinkORM::Persistence","name":"Persistence"},{"html_id":"rethinkdb-orm/RethinkORM/Index","kind":"module","full_name":"RethinkORM::Index","name":"Index"},{"html_id":"rethinkdb-orm/RethinkORM/Associations","kind":"module","full_name":"RethinkORM::Associations","name":"Associations"},{"html_id":"rethinkdb-orm/ActiveModel/Callbacks","kind":"module","full_name":"ActiveModel::Callbacks","name":"Callbacks"},{"html_id":"rethinkdb-orm/ActiveModel/Validation","kind":"module","full_name":"ActiveModel::Validation","name":"Validation"},{"html_id":"rethinkdb-orm/ActiveModel/Model","kind":"class","full_name":"ActiveModel::Model","name":"Model"},{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"CALLBACKS","name":"CALLBACKS","value":"{before_save: [] of Nil, after_save: [] of Nil, before_create: [] of Nil, after_create: [] of Nil, before_update: [] of Nil, after_update: [] of Nil, before_destroy: [] of Nil, after_destroy: [] of Nil}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Lock","kind":"class","full_name":"RethinkORM::Lock","name":"Lock"},"doc":null,"summary":null,"class_methods":[{"id":"attributes:Array(Symbol)-class-method","html_id":"attributes:Array(Symbol)-class-method","name":"attributes","doc":"Returns all attribute keys.","summary":"<p>Returns all attribute keys.</p>","abstract":false,"args":[],"args_string":" : Array(Symbol)","args_html":" : Array(Symbol)","location":null,"def":{"name":"attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Symbol)","visibility":"Public","body":"[:lock_count, :id, :key, :instance_token, :expires_at]"}},{"id":"table_name-class-method","html_id":"table_name-class-method","name":"table_name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"table_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@table_name"}}],"constructors":[{"id":"from_trusted_json(string_or_io:String|IO):self-class-method","html_id":"from_trusted_json(string_or_io:String|IO):self-class-method","name":"from_trusted_json","doc":"Serialize from a trusted JSON source","summary":"<p>Serialize from a trusted JSON source</p>","abstract":false,"args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"}],"args_string":"(string_or_io : String | IO) : <span class=\"k\">self</span>","args_html":"(string_or_io : String | IO) : <span class=\"k\">self</span>","location":null,"def":{"name":"from_trusted_json","args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"RethinkORM::Lock::Reentrant.new(::JSON::PullParser.new(string_or_io), true)"}},{"id":"from_trusted_yaml(string_or_io:String|IO):self-class-method","html_id":"from_trusted_yaml(string_or_io:String|IO):self-class-method","name":"from_trusted_yaml","doc":"Serialize from a trusted YAML source","summary":"<p>Serialize from a trusted YAML source</p>","abstract":false,"args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"}],"args_string":"(string_or_io : String | IO) : <span class=\"k\">self</span>","args_html":"(string_or_io : String | IO) : <span class=\"k\">self</span>","location":null,"def":{"name":"from_trusted_yaml","args":[{"name":"string_or_io","doc":null,"default_value":"","external_name":"string_or_io","restriction":"String | IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"ctx = YAML::ParseContext.new\nnode = (begin\n  document = YAML::Nodes.parse(string_or_io)\n  document.nodes.first? || (begin\n    scalar = YAML::Nodes::Scalar.new(\"\")\n    scalar.style = YAML::ScalarStyle::PLAIN\n    scalar\n  end)\nend)\nRethinkORM::Lock::Reentrant.new(ctx, node, nil, true)\n"}},{"id":"new(key:String,expire:Time::Span?=nil,timeout:Time::Span?=nil,instance_token:String=Lock.new_instance_token)-class-method","html_id":"new(key:String,expire:Time::Span?=nil,timeout:Time::Span?=nil,instance_token:String=Lock.new_instance_token)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"expire","doc":null,"default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"},{"name":"timeout","doc":null,"default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"},{"name":"instance_token","doc":null,"default_value":"Lock.new_instance_token","external_name":"instance_token","restriction":"String"}],"args_string":"(key : String, expire : Time::Span? = <span class=\"n\">nil</span>, timeout : Time::Span? = <span class=\"n\">nil</span>, instance_token : String = <span class=\"t\">Lock</span>.new_instance_token)","args_html":"(key : String, expire : Time::Span? = <span class=\"n\">nil</span>, timeout : Time::Span? = <span class=\"n\">nil</span>, instance_token : String = <span class=\"t\">Lock</span>.new_instance_token)","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"expire","doc":null,"default_value":"nil","external_name":"expire","restriction":"Time::Span | ::Nil"},{"name":"timeout","doc":null,"default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"},{"name":"instance_token","doc":null,"default_value":"Lock.new_instance_token","external_name":"instance_token","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key, expire, timeout, instance_token)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"ctx","doc":null,"default_value":"","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":null,"def":{"name":"new","args":[{"name":"ctx","doc":null,"default_value":"","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"YAML::Nodes::Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ctx.read_alias(node, {{ @type }}) do |obj|\n  return obj\nend\ninstance = allocate\nctx.record_anchor(node, instance)\ninstance.initialize(ctx, node, nil)\nif instance.responds_to?(:finalize)\n  GC.add_finalizer(instance)\nend\ninstance\n"}},{"id":"new(lock_count:Int32?=nil,id:String??=nil,key:String?=nil,instance_token:String?=nil,expires_at:Time?=nil)-class-method","html_id":"new(lock_count:Int32?=nil,id:String??=nil,key:String?=nil,instance_token:String?=nil,expires_at:Time?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"lock_count","doc":null,"default_value":"nil","external_name":"lock_count","restriction":"Int32 | Nil"},{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"String | Nil | Nil"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | Nil"},{"name":"instance_token","doc":null,"default_value":"nil","external_name":"instance_token","restriction":"String | Nil"},{"name":"expires_at","doc":null,"default_value":"nil","external_name":"expires_at","restriction":"Time | Nil"}],"args_string":"(lock_count : Int32? = <span class=\"n\">nil</span>, id : String?? = <span class=\"n\">nil</span>, key : String? = <span class=\"n\">nil</span>, instance_token : String? = <span class=\"n\">nil</span>, expires_at : Time? = <span class=\"n\">nil</span>)","args_html":"(lock_count : Int32? = <span class=\"n\">nil</span>, id : String?? = <span class=\"n\">nil</span>, key : String? = <span class=\"n\">nil</span>, instance_token : String? = <span class=\"n\">nil</span>, expires_at : Time? = <span class=\"n\">nil</span>)","location":null,"def":{"name":"new","args":[{"name":"lock_count","doc":null,"default_value":"nil","external_name":"lock_count","restriction":"Int32 | Nil"},{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"String | Nil | Nil"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | Nil"},{"name":"instance_token","doc":null,"default_value":"nil","external_name":"instance_token","restriction":"String | Nil"},{"name":"expires_at","doc":null,"default_value":"nil","external_name":"expires_at","restriction":"Time | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(lock_count, id, key, instance_token, expires_at)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-class-method","html_id":"new(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-class-method","name":"new","doc":"Initialize RethinkORM::Lock::Reentrant from `HTTP::Params`.","summary":"<p>Initialize RethinkORM::Lock::Reentrant from <code>HTTP::Params</code>.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"args_string":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","args_html":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","location":null,"def":{"name":"new","args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"after_create-instance-method","html_id":"after_create-instance-method","name":"after_create","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"after_create","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__after_create"}},{"id":"after_destroy-instance-method","html_id":"after_destroy-instance-method","name":"after_destroy","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"after_destroy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__after_destroy"}},{"id":"after_save-instance-method","html_id":"after_save-instance-method","name":"after_save","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"after_save","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__after_save"}},{"id":"after_update-instance-method","html_id":"after_update-instance-method","name":"after_update","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"after_update","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__after_update"}},{"id":"apply_defaults-instance-method","html_id":"apply_defaults-instance-method","name":"apply_defaults","doc":"Generate code to apply default values","summary":"<p>Generate code to apply default values</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"apply_defaults","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super()"}},{"id":"assign_attributes(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-instance-method","html_id":"assign_attributes(params:HTTP::Params|Hash(String,String)|Tuple(String,String))-instance-method","name":"assign_attributes","doc":"Assign to mulitple attributes via `HTTP::Params`.","summary":"<p>Assign to mulitple attributes via <code>HTTP::Params</code>.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"args_string":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","args_html":"(params : HTTP::Params | Hash(String, String) | Tuple(String, String))","location":null,"def":{"name":"assign_attributes","args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"HTTP::Params | Hash(String, String) | Tuple(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__from_object_params__(params)\nself\n"}},{"id":"assign_attributes(lock_count:Int32|Missing=Missing,id:String?|Missing=Missing,key:String|Missing=Missing,instance_token:String|Missing=Missing,expires_at:Time|Missing=Missing)-instance-method","html_id":"assign_attributes(lock_count:Int32|Missing=Missing,id:String?|Missing=Missing,key:String|Missing=Missing,instance_token:String|Missing=Missing,expires_at:Time|Missing=Missing)-instance-method","name":"assign_attributes","doc":"Assign to multiple attributes.","summary":"<p>Assign to multiple attributes.</p>","abstract":false,"args":[{"name":"lock_count","doc":null,"default_value":"Missing","external_name":"lock_count","restriction":"Int32 | Missing"},{"name":"id","doc":null,"default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"},{"name":"key","doc":null,"default_value":"Missing","external_name":"key","restriction":"String | Missing"},{"name":"instance_token","doc":null,"default_value":"Missing","external_name":"instance_token","restriction":"String | Missing"},{"name":"expires_at","doc":null,"default_value":"Missing","external_name":"expires_at","restriction":"Time | Missing"}],"args_string":"(lock_count : Int32 | Missing = <span class=\"t\">Missing</span>, id : String? | Missing = <span class=\"t\">Missing</span>, key : String | Missing = <span class=\"t\">Missing</span>, instance_token : String | Missing = <span class=\"t\">Missing</span>, expires_at : Time | Missing = <span class=\"t\">Missing</span>)","args_html":"(lock_count : Int32 | Missing = <span class=\"t\">Missing</span>, id : String? | Missing = <span class=\"t\">Missing</span>, key : String | Missing = <span class=\"t\">Missing</span>, instance_token : String | Missing = <span class=\"t\">Missing</span>, expires_at : Time | Missing = <span class=\"t\">Missing</span>)","location":null,"def":{"name":"assign_attributes","args":[{"name":"lock_count","doc":null,"default_value":"Missing","external_name":"lock_count","restriction":"Int32 | Missing"},{"name":"id","doc":null,"default_value":"Missing","external_name":"id","restriction":"String | Nil | Missing"},{"name":"key","doc":null,"default_value":"Missing","external_name":"key","restriction":"String | Missing"},{"name":"instance_token","doc":null,"default_value":"Missing","external_name":"instance_token","restriction":"String | Missing"},{"name":"expires_at","doc":null,"default_value":"Missing","external_name":"expires_at","restriction":"Time | Missing"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lock_count.is_a?(Missing)\nelse\n  self.lock_count = lock_count\nend\nif key.is_a?(Missing)\nelse\n  self.key = key\nend\nif instance_token.is_a?(Missing)\nelse\n  self.instance_token = instance_token\nend\nif expires_at.is_a?(Missing)\nelse\n  self.expires_at = expires_at\nend\n"}},{"id":"assign_attributes_from_json(json)-instance-method","html_id":"assign_attributes_from_json(json)-instance-method","name":"assign_attributes_from_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":""}],"args_string":"(json)","args_html":"(json)","location":null,"def":{"name":"assign_attributes_from_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_json(json)\ndata = (JSON.parse(json)).as_h\nif (data.has_key?(\"lock_count\")) && (self.lock_count != model.lock_count)\n  self.lock_count = model.lock_count\nend\nif (data.has_key?(\"key\")) && (self.key != model.key)\n  self.key = model.key\nend\nif (data.has_key?(\"instance_token\")) && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif (data.has_key?(\"expires_at\")) && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"id":"assign_attributes_from_trusted_json(json)-instance-method","html_id":"assign_attributes_from_trusted_json(json)-instance-method","name":"assign_attributes_from_trusted_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":""}],"args_string":"(json)","args_html":"(json)","location":null,"def":{"name":"assign_attributes_from_trusted_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (json.responds_to?(:read_remaining)) && (json.responds_to?(:read_string))\n  json = json.read_string(json.read_remaining)\nend\nmodel = self.class.from_trusted_json(json)\ndata = (JSON.parse(json)).as_h\nif (data.has_key?(\"lock_count\")) && (self.lock_count != model.lock_count)\n  self.lock_count = model.lock_count\nend\nif (data.has_key?(\"id\")) && (self.id != model.id)\n  self.id = model.id\nend\nif (data.has_key?(\"key\")) && (self.key != model.key)\n  self.key = model.key\nend\nif (data.has_key?(\"instance_token\")) && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif (data.has_key?(\"expires_at\")) && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"id":"assign_attributes_from_trusted_yaml(yaml)-instance-method","html_id":"assign_attributes_from_trusted_yaml(yaml)-instance-method","name":"assign_attributes_from_trusted_yaml","doc":null,"summary":null,"abstract":false,"args":[{"name":"yaml","doc":null,"default_value":"","external_name":"yaml","restriction":""}],"args_string":"(yaml)","args_html":"(yaml)","location":null,"def":{"name":"assign_attributes_from_trusted_yaml","args":[{"name":"yaml","doc":null,"default_value":"","external_name":"yaml","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (yaml.responds_to?(:read_remaining)) && (yaml.responds_to?(:read_string))\n  yaml = yaml.read_string(yaml.read_remaining)\nend\nmodel = self.class.from_trusted_yaml(yaml)\ndata = (YAML.parse(yaml)).as_h\nif (data.has_key?(\"lock_count\")) && (self.lock_count != model.lock_count)\n  self.lock_count = model.lock_count\nend\nif (data.has_key?(\"id\")) && (self.id != model.id)\n  self.id = model.id\nend\nif (data.has_key?(\"key\")) && (self.key != model.key)\n  self.key = model.key\nend\nif (data.has_key?(\"instance_token\")) && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif (data.has_key?(\"expires_at\")) && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"id":"assign_attributes_from_yaml(yaml)-instance-method","html_id":"assign_attributes_from_yaml(yaml)-instance-method","name":"assign_attributes_from_yaml","doc":"Uses the YAML parser as JSON is valid YAML","summary":"<p>Uses the YAML parser as JSON is valid YAML</p>","abstract":false,"args":[{"name":"yaml","doc":null,"default_value":"","external_name":"yaml","restriction":""}],"args_string":"(yaml)","args_html":"(yaml)","location":null,"def":{"name":"assign_attributes_from_yaml","args":[{"name":"yaml","doc":null,"default_value":"","external_name":"yaml","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (yaml.responds_to?(:read_remaining)) && (yaml.responds_to?(:read_string))\n  yaml = yaml.read_string(yaml.read_remaining)\nend\nmodel = self.class.from_yaml(yaml)\ndata = (YAML.parse(yaml)).as_h\nif (data.has_key?(\"lock_count\")) && (self.lock_count != model.lock_count)\n  self.lock_count = model.lock_count\nend\nif (data.has_key?(\"key\")) && (self.key != model.key)\n  self.key = model.key\nend\nif (data.has_key?(\"instance_token\")) && (self.instance_token != model.instance_token)\n  self.instance_token = model.instance_token\nend\nif (data.has_key?(\"expires_at\")) && (self.expires_at != model.expires_at)\n  self.expires_at = model.expires_at\nend\nself\n"}},{"id":"attributes-instance-method","html_id":"attributes-instance-method","name":"attributes","doc":"Returns a `Hash` of all attribute values","summary":"<p>Returns a <code>Hash</code> of all attribute values</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{:lock_count => @lock_count, :id => @id, :key => @key, :instance_token => @instance_token, :expires_at => @expires_at}"}},{"id":"attributes_tuple-instance-method","html_id":"attributes_tuple-instance-method","name":"attributes_tuple","doc":"Returns a `NamedTuple` of all attribute values.","summary":"<p>Returns a <code>NamedTuple</code> of all attribute values.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"attributes_tuple","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{lock_count: @lock_count, id: @id, key: @key, instance_token: @instance_token, expires_at: @expires_at}"}},{"id":"before_create-instance-method","html_id":"before_create-instance-method","name":"before_create","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"before_create","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_create"}},{"id":"before_destroy-instance-method","html_id":"before_destroy-instance-method","name":"before_destroy","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"before_destroy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_destroy"}},{"id":"before_save-instance-method","html_id":"before_save-instance-method","name":"before_save","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"before_save","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_save"}},{"id":"before_update-instance-method","html_id":"before_update-instance-method","name":"before_update","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"before_update","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_update"}},{"id":"changed?-instance-method","html_id":"changed?-instance-method","name":"changed?","doc":"Check if any attributes have changed.","summary":"<p>Check if any attributes have changed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"modified = false\nif @lock_count_changed\n  modified = true\nend\nif @id_changed\n  modified = true\nend\nif @key_changed\n  modified = true\nend\nif @instance_token_changed\n  modified = true\nend\nif @expires_at_changed\n  modified = true\nend\nmodified\n"}},{"id":"changed_attributes-instance-method","html_id":"changed_attributes-instance-method","name":"changed_attributes","doc":"Returns a `Hash` with all changed attributes.","summary":"<p>Returns a <code>Hash</code> with all changed attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"changed_attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"all = attributes\nif @lock_count_changed\nelse\n  all.delete(:lock_count)\nend\nif @id_changed\nelse\n  all.delete(:id)\nend\nif @key_changed\nelse\n  all.delete(:key)\nend\nif @instance_token_changed\nelse\n  all.delete(:instance_token)\nend\nif @expires_at_changed\nelse\n  all.delete(:expires_at)\nend\nall\n"}},{"id":"changed_json(io:IO):Nil-instance-method","html_id":"changed_json(io:IO):Nil-instance-method","name":"changed_json","doc":"Serialize the set of changed attributes to JSON.","summary":"<p>Serialize the set of changed attributes to JSON.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":null,"def":{"name":"changed_json","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"all = (JSON.parse(self.to_json)).as_h\nif @lock_count_changed\nelse\n  all.delete(\"lock_count\")\nend\nif @id_changed\nelse\n  all.delete(\"id\")\nend\nif @key_changed\nelse\n  all.delete(\"key\")\nend\nif @instance_token_changed\nelse\n  all.delete(\"instance_token\")\nend\nif @expires_at_changed\nelse\n  all.delete(\"expires_at\")\nend\nall.to_json(io)\n"}},{"id":"changed_json:String-instance-method","html_id":"changed_json:String-instance-method","name":"changed_json","doc":"Serialize the set of changed attributes to JSON.","summary":"<p>Serialize the set of changed attributes to JSON.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"changed_json","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |string|\n  changed_json(string)\nend"}},{"id":"changed_yaml(io:IO):Nil-instance-method","html_id":"changed_yaml(io:IO):Nil-instance-method","name":"changed_yaml","doc":"Serialize the set of changed attributes to YAML.","summary":"<p>Serialize the set of changed attributes to YAML.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":null,"def":{"name":"changed_yaml","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"all = (JSON.parse(self.to_json)).as_h\nif @lock_count_changed\nelse\n  all.delete(\"lock_count\")\nend\nif @id_changed\nelse\n  all.delete(\"id\")\nend\nif @key_changed\nelse\n  all.delete(\"key\")\nend\nif @instance_token_changed\nelse\n  all.delete(\"instance_token\")\nend\nif @expires_at_changed\nelse\n  all.delete(\"expires_at\")\nend\nall.to_yaml(io)\n"}},{"id":"changed_yaml:String-instance-method","html_id":"changed_yaml:String-instance-method","name":"changed_yaml","doc":"Serialize the set of changed attributes to YAML.","summary":"<p>Serialize the set of changed attributes to YAML.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"changed_yaml","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |string|\n  changed_yaml(string)\nend"}},{"id":"clear_changes_information-instance-method","html_id":"clear_changes_information-instance-method","name":"clear_changes_information","doc":"Reset changes for all attributes.","summary":"<p>Reset changes for all attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"clear_changes_information","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lock_count_changed = false\n@lock_count_was = nil\n@id_changed = false\n@id_was = nil\n@key_changed = false\n@key_was = nil\n@instance_token_changed = false\n@instance_token_was = nil\n@expires_at_changed = false\n@expires_at_was = nil\nnil\n"}},{"id":"expires_at:Time-instance-method","html_id":"expires_at:Time-instance-method","name":"expires_at","doc":"`expires_at` getter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#expires_at:Time-instance-method\">#expires_at</a></code> getter</p>","abstract":false,"args":[],"args_string":" : Time","args_html":" : Time","location":null,"def":{"name":"expires_at","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time","visibility":"Public","body":"__temp_105 = @expires_at\nif __temp_105.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock::Reentrant#expires_at : Time\"))\nend\n__temp_105\n"}},{"id":"expires_at=(value:Time)-instance-method","html_id":"expires_at=(value:Time)-instance-method","name":"expires_at=","doc":"`expires_at` setter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#expires_at:Time-instance-method\">#expires_at</a></code> setter</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"}],"args_string":"(value : Time)","args_html":"(value : Time)","location":null,"def":{"name":"expires_at=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!@expires_at_changed) && (@expires_at != value)\n  @expires_at_changed = true\n  @expires_at_was = @expires_at\nend\n@expires_at = value\n"}},{"id":"expires_at_change-instance-method","html_id":"expires_at_change-instance-method","name":"expires_at_change","doc":"Returns `{ expires_at_was, expires_at }` if `expires_at` has changed.","summary":"<p>Returns <code>{ expires_at_was, expires_at }</code> if <code><a href=\"../../RethinkORM/Lock/Reentrant.html#expires_at:Time-instance-method\">#expires_at</a></code> has changed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"expires_at_change","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @expires_at_changed\n  {@expires_at_was, @expires_at}\nelse\n  nil\nend"}},{"id":"expires_at_changed?-instance-method","html_id":"expires_at_changed?-instance-method","name":"expires_at_changed?","doc":"Check if `expires_at` is in the set of changed attributes.","summary":"<p>Check if <code><a href=\"../../RethinkORM/Lock/Reentrant.html#expires_at:Time-instance-method\">#expires_at</a></code> is in the set of changed attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"expires_at_changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!@expires_at_changed)"}},{"id":"expires_at_was:Time?-instance-method","html_id":"expires_at_was:Time?-instance-method","name":"expires_at_was","doc":"Returns the previous value of `expires_at`.","summary":"<p>Returns the previous value of <code><a href=\"../../RethinkORM/Lock/Reentrant.html#expires_at:Time-instance-method\">#expires_at</a></code>.</p>","abstract":false,"args":[],"args_string":" : Time?","args_html":" : Time?","location":null,"def":{"name":"expires_at_was","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@expires_at_was"}},{"id":"expires_at_will_change!-instance-method","html_id":"expires_at_will_change!-instance-method","name":"expires_at_will_change!","doc":"Include `expires_at` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../../RethinkORM/Lock/Reentrant.html#expires_at:Time-instance-method\">#expires_at</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"expires_at_will_change!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@expires_at_changed = true\n@expires_at_was = @expires_at.dup\n"}},{"id":"id:String?-instance-method","html_id":"id:String?-instance-method","name":"id","doc":"`id` getter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#id:String?-instance-method\">#id</a></code> getter</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":null,"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | Nil","visibility":"Public","body":"@id"}},{"id":"id=(value:String?)-instance-method","html_id":"id=(value:String?)-instance-method","name":"id=","doc":"`id` setter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#id:String?-instance-method\">#id</a></code> setter</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String | Nil"}],"args_string":"(value : String?)","args_html":"(value : String?)","location":null,"def":{"name":"id=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!@id_changed) && (@id != value)\n  @id_changed = true\n  @id_was = @id\nend\n@id = value\n"}},{"id":"id_change-instance-method","html_id":"id_change-instance-method","name":"id_change","doc":"Returns `{ id_was, id }` if `id` has changed.","summary":"<p>Returns <code>{ id_was, id }</code> if <code><a href=\"../../RethinkORM/Lock/Reentrant.html#id:String?-instance-method\">#id</a></code> has changed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"id_change","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @id_changed\n  {@id_was, @id}\nelse\n  nil\nend"}},{"id":"id_changed?-instance-method","html_id":"id_changed?-instance-method","name":"id_changed?","doc":"Check if `id` is in the set of changed attributes.","summary":"<p>Check if <code><a href=\"../../RethinkORM/Lock/Reentrant.html#id:String?-instance-method\">#id</a></code> is in the set of changed attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"id_changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!@id_changed)"}},{"id":"id_was:String?-instance-method","html_id":"id_was:String?-instance-method","name":"id_was","doc":"Returns the previous value of `id`.","summary":"<p>Returns the previous value of <code><a href=\"../../RethinkORM/Lock/Reentrant.html#id:String?-instance-method\">#id</a></code>.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":null,"def":{"name":"id_was","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id_was"}},{"id":"id_will_change!-instance-method","html_id":"id_will_change!-instance-method","name":"id_will_change!","doc":"Include `id` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../../RethinkORM/Lock/Reentrant.html#id:String?-instance-method\">#id</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"id_will_change!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id_changed = true\n@id_was = @id.dup\n"}},{"id":"instance_token:String-instance-method","html_id":"instance_token:String-instance-method","name":"instance_token","doc":"`instance_token` getter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#instance_token:String-instance-method\">#instance_token</a></code> getter</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"instance_token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"__temp_105 = @instance_token\nif __temp_105.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock::Reentrant#instance_token : String\"))\nend\n__temp_105\n"}},{"id":"instance_token=(value:String)-instance-method","html_id":"instance_token=(value:String)-instance-method","name":"instance_token=","doc":"`instance_token` setter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#instance_token:String-instance-method\">#instance_token</a></code> setter</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","location":null,"def":{"name":"instance_token=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!@instance_token_changed) && (@instance_token != value)\n  @instance_token_changed = true\n  @instance_token_was = @instance_token\nend\n@instance_token = value\n"}},{"id":"instance_token_change-instance-method","html_id":"instance_token_change-instance-method","name":"instance_token_change","doc":"Returns `{ instance_token_was, instance_token }` if `instance_token` has changed.","summary":"<p>Returns <code>{ instance_token_was, instance_token }</code> if <code><a href=\"../../RethinkORM/Lock/Reentrant.html#instance_token:String-instance-method\">#instance_token</a></code> has changed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"instance_token_change","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @instance_token_changed\n  {@instance_token_was, @instance_token}\nelse\n  nil\nend"}},{"id":"instance_token_changed?-instance-method","html_id":"instance_token_changed?-instance-method","name":"instance_token_changed?","doc":"Check if `instance_token` is in the set of changed attributes.","summary":"<p>Check if <code><a href=\"../../RethinkORM/Lock/Reentrant.html#instance_token:String-instance-method\">#instance_token</a></code> is in the set of changed attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"instance_token_changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!@instance_token_changed)"}},{"id":"instance_token_was:String?-instance-method","html_id":"instance_token_was:String?-instance-method","name":"instance_token_was","doc":"Returns the previous value of `instance_token`.","summary":"<p>Returns the previous value of <code><a href=\"../../RethinkORM/Lock/Reentrant.html#instance_token:String-instance-method\">#instance_token</a></code>.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":null,"def":{"name":"instance_token_was","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@instance_token_was"}},{"id":"instance_token_will_change!-instance-method","html_id":"instance_token_will_change!-instance-method","name":"instance_token_will_change!","doc":"Include `instance_token` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../../RethinkORM/Lock/Reentrant.html#instance_token:String-instance-method\">#instance_token</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"instance_token_will_change!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@instance_token_changed = true\n@instance_token_was = @instance_token.dup\n"}},{"id":"key:String-instance-method","html_id":"key:String-instance-method","name":"key","doc":"`key` getter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#key:String-instance-method\">#key</a></code> getter</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"__temp_105 = @key\nif __temp_105.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock::Reentrant#key : String\"))\nend\n__temp_105\n"}},{"id":"key=(value:String)-instance-method","html_id":"key=(value:String)-instance-method","name":"key=","doc":"`key` setter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#key:String-instance-method\">#key</a></code> setter</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","location":null,"def":{"name":"key=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!@key_changed) && (@key != value)\n  @key_changed = true\n  @key_was = @key\nend\n@key = value\n"}},{"id":"key_change-instance-method","html_id":"key_change-instance-method","name":"key_change","doc":"Returns `{ key_was, key }` if `key` has changed.","summary":"<p>Returns <code>{ key_was, key }</code> if <code><a href=\"../../RethinkORM/Lock/Reentrant.html#key:String-instance-method\">#key</a></code> has changed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"key_change","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @key_changed\n  {@key_was, @key}\nelse\n  nil\nend"}},{"id":"key_changed?-instance-method","html_id":"key_changed?-instance-method","name":"key_changed?","doc":"Check if `key` is in the set of changed attributes.","summary":"<p>Check if <code><a href=\"../../RethinkORM/Lock/Reentrant.html#key:String-instance-method\">#key</a></code> is in the set of changed attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"key_changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!@key_changed)"}},{"id":"key_was:String?-instance-method","html_id":"key_was:String?-instance-method","name":"key_was","doc":"Returns the previous value of `key`.","summary":"<p>Returns the previous value of <code><a href=\"../../RethinkORM/Lock/Reentrant.html#key:String-instance-method\">#key</a></code>.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":null,"def":{"name":"key_was","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@key_was"}},{"id":"key_will_change!-instance-method","html_id":"key_will_change!-instance-method","name":"key_will_change!","doc":"Include `key` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../../RethinkORM/Lock/Reentrant.html#key:String-instance-method\">#key</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"key_will_change!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@key_changed = true\n@key_was = @key.dup\n"}},{"id":"lock_count:Int32-instance-method","html_id":"lock_count:Int32-instance-method","name":"lock_count","doc":"`lock_count` getter","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#lock_count:Int32-instance-method\">#lock_count</a></code> getter</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":null,"def":{"name":"lock_count","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"__temp_105 = @lock_count\nif __temp_105.nil?\n  raise(NilAssertionError.new(\"Nil for RethinkORM::Lock::Reentrant#lock_count : Int32\"))\nend\n__temp_105\n"}},{"id":"lock_count=(value:Int32)-instance-method","html_id":"lock_count=(value:Int32)-instance-method","name":"lock_count=","doc":"Override the map json\n`lock_count` setter","summary":"<p>Override the map json <code><a href=\"../../RethinkORM/Lock/Reentrant.html#lock_count:Int32-instance-method\">#lock_count</a></code> setter</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","location":null,"def":{"name":"lock_count=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!@lock_count_changed) && (@lock_count != value)\n  @lock_count_changed = true\n  @lock_count_was = @lock_count\nend\n@lock_count = value\n"}},{"id":"lock_count_change-instance-method","html_id":"lock_count_change-instance-method","name":"lock_count_change","doc":"Returns `{ lock_count_was, lock_count }` if `lock_count` has changed.","summary":"<p>Returns <code>{ lock_count_was, lock_count }</code> if <code><a href=\"../../RethinkORM/Lock/Reentrant.html#lock_count:Int32-instance-method\">#lock_count</a></code> has changed.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"lock_count_change","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @lock_count_changed\n  {@lock_count_was, @lock_count}\nelse\n  nil\nend"}},{"id":"lock_count_changed?-instance-method","html_id":"lock_count_changed?-instance-method","name":"lock_count_changed?","doc":"Check if `lock_count` is in the set of changed attributes.","summary":"<p>Check if <code><a href=\"../../RethinkORM/Lock/Reentrant.html#lock_count:Int32-instance-method\">#lock_count</a></code> is in the set of changed attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"lock_count_changed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(!@lock_count_changed)"}},{"id":"lock_count_default:Int32-instance-method","html_id":"lock_count_default:Int32-instance-method","name":"lock_count_default","doc":"`lock_count`'s default value","summary":"<p><code><a href=\"../../RethinkORM/Lock/Reentrant.html#lock_count:Int32-instance-method\">#lock_count</a></code>'s default value</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":7,"url":null},"def":{"name":"lock_count_default","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"raise(NilAssertionError.new(\"No default for RethinkORM::Lock::Reentrant#lock_count\"))"}},{"id":"lock_count_was:Int32?-instance-method","html_id":"lock_count_was:Int32?-instance-method","name":"lock_count_was","doc":"Returns the previous value of `lock_count`.","summary":"<p>Returns the previous value of <code><a href=\"../../RethinkORM/Lock/Reentrant.html#lock_count:Int32-instance-method\">#lock_count</a></code>.</p>","abstract":false,"args":[],"args_string":" : Int32?","args_html":" : Int32?","location":null,"def":{"name":"lock_count_was","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lock_count_was"}},{"id":"lock_count_will_change!-instance-method","html_id":"lock_count_will_change!-instance-method","name":"lock_count_will_change!","doc":"Include `lock_count` in the set of changed attributes, whether it has changed or not.","summary":"<p>Include <code><a href=\"../../RethinkORM/Lock/Reentrant.html#lock_count:Int32-instance-method\">#lock_count</a></code> in the set of changed attributes, whether it has changed or not.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"lock_count_will_change!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lock_count_changed = true\n@lock_count_was = @lock_count.dup\n"}},{"id":"persistent_attributes-instance-method","html_id":"persistent_attributes-instance-method","name":"persistent_attributes","doc":"Returns a `Hash` of all attributes that can be persisted.","summary":"<p>Returns a <code>Hash</code> of all attributes that can be persisted.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"persistent_attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{:lock_count => @lock_count, :id => @id, :key => @key, :instance_token => @instance_token, :expires_at => @expires_at}"}},{"id":"restore_attributes-instance-method","html_id":"restore_attributes-instance-method","name":"restore_attributes","doc":"Reset each attribute to their previous values and clears all changes.","summary":"<p>Reset each attribute to their previous values and clears all changes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"restore_attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @lock_count_changed\n  @lock_count = @lock_count_was\nend\nif @id_changed\n  @id = @id_was\nend\nif @key_changed\n  @key = @key_was\nend\nif @instance_token_changed\n  @instance_token = @instance_token_was\nend\nif @expires_at_changed\n  @expires_at = @expires_at_was\nend\nclear_changes_information\n"}},{"id":"run_create_callbacks(&)-instance-method","html_id":"run_create_callbacks(&)-instance-method","name":"run_create_callbacks","doc":"Wrap a block with callbacks for the appropriate crud operation","summary":"<p>Wrap a block with callbacks for the appropriate crud operation</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"run_create_callbacks","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_create\nresult = yield\n__after_create\nresult\n"}},{"id":"run_destroy_callbacks(&)-instance-method","html_id":"run_destroy_callbacks(&)-instance-method","name":"run_destroy_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"run_destroy_callbacks","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_destroy\nresult = yield\n__after_destroy\nresult\n"}},{"id":"run_save_callbacks(&)-instance-method","html_id":"run_save_callbacks(&)-instance-method","name":"run_save_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"run_save_callbacks","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_save\nresult = yield\n__after_save\nresult\n"}},{"id":"run_update_callbacks(&)-instance-method","html_id":"run_update_callbacks(&)-instance-method","name":"run_update_callbacks","doc":"DB locks for RethinkDB\nTODO: Conform to the [NoBrainer](http://nobrainer.io/) locking interface.","summary":"<p>DB locks for RethinkDB TODO: Conform to the <a href=\"http://nobrainer.io/\">NoBrainer</a> locking interface.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":4,"url":null},"def":{"name":"run_update_callbacks","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"__before_update\nresult = yield\n__after_update\nresult\n"}},{"id":"table_name-instance-method","html_id":"table_name-instance-method","name":"table_name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"table_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@table_name"}},{"id":"to_json(json:JSON::Builder)-instance-method","html_id":"to_json(json:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"::JSON::Builder"}],"args_string":"(json : JSON::Builder)","args_html":"(json : JSON::Builder)","location":null,"def":{"name":"to_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"::JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"json.object do\n  _lock_count = @lock_count\n  if _lock_count.nil?\n  else\n    json.field(\"lock_count\") do\n      _lock_count.to_json(json)\n    end\n  end\n  _id = @id\n  if _id.nil?\n  else\n    json.field(\"id\") do\n      _id.to_json(json)\n    end\n  end\n  _key = @key\n  if _key.nil?\n  else\n    json.field(\"key\") do\n      _key.to_json(json)\n    end\n  end\n  _instance_token = @instance_token\n  if _instance_token.nil?\n  else\n    json.field(\"instance_token\") do\n      if _instance_token\n        TokenRefresher.to_json(_instance_token, json)\n      else\n        nil.to_json(json)\n      end\n    end\n  end\n  _expires_at = @expires_at\n  if _expires_at.nil?\n  else\n    json.field(\"expires_at\") do\n      if _expires_at\n        FloatEpochConverter.to_json(_expires_at, json)\n      else\n        nil.to_json(json)\n      end\n    end\n  end\nend"}},{"id":"to_yaml(__temp_104:YAML::Nodes::Builder)-instance-method","html_id":"to_yaml(__temp_104:YAML::Nodes::Builder)-instance-method","name":"to_yaml","doc":null,"summary":null,"abstract":false,"args":[{"name":"__temp_104","doc":null,"default_value":"","external_name":"__temp_104","restriction":"::YAML::Nodes::Builder"}],"args_string":"(__temp_104 : YAML::Nodes::Builder)","args_html":"(__temp_104 : YAML::Nodes::Builder)","location":null,"def":{"name":"to_yaml","args":[{"name":"__temp_104","doc":null,"default_value":"","external_name":"__temp_104","restriction":"::YAML::Nodes::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"__temp_104.mapping(reference: self) do\n  _lock_count = @lock_count\n  if _lock_count.nil?\n  else\n    \"lock_count\".to_yaml(__temp_104)\n    _lock_count.to_yaml(__temp_104)\n  end\n  _id = @id\n  if _id.nil?\n  else\n    \"id\".to_yaml(__temp_104)\n    _id.to_yaml(__temp_104)\n  end\n  _key = @key\n  if _key.nil?\n  else\n    \"key\".to_yaml(__temp_104)\n    _key.to_yaml(__temp_104)\n  end\n  _instance_token = @instance_token\n  if _instance_token.nil?\n  else\n    \"instance_token\".to_yaml(__temp_104)\n    TokenRefresher.to_yaml(_instance_token, __temp_104)\n  end\n  _expires_at = @expires_at\n  if _expires_at.nil?\n  else\n    \"expires_at\".to_yaml(__temp_104)\n    FloatEpochConverter.to_yaml(_expires_at, __temp_104)\n  end\nend"}},{"id":"try_lock(expire:Time::Span=self.expire)-instance-method","html_id":"try_lock(expire:Time::Span=self.expire)-instance-method","name":"try_lock","doc":null,"summary":null,"abstract":false,"args":[{"name":"expire","doc":null,"default_value":"self.expire","external_name":"expire","restriction":"Time::Span"}],"args_string":"(expire : Time::Span = <span class=\"k\">self</span>.expire)","args_html":"(expire : Time::Span = <span class=\"k\">self</span>.expire)","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":22,"url":null},"def":{"name":"try_lock","args":[{"name":"expire","doc":null,"default_value":"self.expire","external_name":"expire","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set_expiration(expire)\nresult = Lock::Reentrant.table_query do |q|\n  (q.get(self.id.as(String))).replace do |doc|\n    r.branch((doc[:instance_token].default(nil)).eq(self.instance_token), doc.merge({expires_at: expiry_epoch, lock_count: doc[:lock_count] + 1}), r.branch((doc.eq(nil)).or((r.epoch_time(doc[:expires_at])) < r.now), lock_attributes.merge({:lock_count => 1}), doc))\n  end\nend\n@locked = true\ninserted = result[\"inserted\"]?.try do |__arg0|\n  __arg0.raw.as(Int64)\nend\nreplaced = result[\"replaced\"]?.try do |__arg1|\n  __arg1.raw.as(Int64)\nend\nif inserted && replaced\n  (inserted + replaced) == 1\nelse\n  false\nend\n"}},{"id":"unlock-instance-method","html_id":"unlock-instance-method","name":"unlock","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/lock/reentrant.cr","line_number":60,"url":null},"def":{"name":"unlock","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set_expiration(use_previous: true)\nresult = Lock::Reentrant.table_query do |q|\n  (q.get(self.id.as(String))).replace do |doc|\n    r.branch((doc[:instance_token].default(nil)).eq(self.instance_token), r.branch(doc[:lock_count] > 1, doc.merge({:expires_at => expiry_epoch, :lock_count => doc[:lock_count] - 1}), nil), doc)\n  end\nend\ndeleted = result[\"deleted\"]?.try do |__arg2|\n  __arg2.raw.as(Int64)\nend\nreplaced = result[\"replaced\"]?.try do |__arg3|\n  __arg3.raw.as(Int64)\nend\n@locked = if deleted && replaced\n  !((replaced + deleted) == 1)\nelse\n  true\nend\nif @locked\n  raise(Error::LockLost.new(self.key.as(String)))\nend\n"}},{"id":"validate_nilability-instance-method","html_id":"validate_nilability-instance-method","name":"validate_nilability","doc":"Validate that all non-nillable fields have values.","summary":"<p>Validate that all non-nillable fields have values.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"validate_nilability","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @lock_count.nil?\n  validation_error(:lock_count, \"should not be nil\")\nend\nif @key.nil?\n  validation_error(:key, \"should not be nil\")\nend\nif @instance_token.nil?\n  validation_error(:instance_token, \"should not be nil\")\nend\nif @expires_at.nil?\n  validation_error(:expires_at, \"should not be nil\")\nend\n"}}],"macros":[],"types":[]}]},{"html_id":"rethinkdb-orm/RethinkORM/Persistence","path":"RethinkORM/Persistence.html","kind":"module","full_name":"RethinkORM::Persistence","name":"Persistence","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/rethinkdb-orm/persistence.cr","line_number":6,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"delete-instance-method","html_id":"delete-instance-method","name":"delete","doc":"Only deletes document from table. No callbacks or updated associations\n","summary":"<p>Only deletes document from table.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":147,"url":null},"def":{"name":"delete","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if destroyed?\n  return self\nend\nif new_record?\n  return self\nend\n__delete\n"}},{"id":"destroy-instance-method","html_id":"destroy-instance-method","name":"destroy","doc":"Destroy object, run destroy callbacks and update associations\n","summary":"<p>Destroy object, run destroy callbacks and update associations </p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":135,"url":null},"def":{"name":"destroy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if destroyed?\n  return self\nend\nif new_record?\n  return self\nend\nrun_destroy_callbacks do\n  __delete\n  self\nend\n"}},{"id":"destroyed-instance-method","html_id":"destroyed-instance-method","name":"destroyed","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":27,"url":null},"def":{"name":"destroyed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@destroyed"}},{"id":"destroyed=(destroyed)-instance-method","html_id":"destroyed=(destroyed)-instance-method","name":"destroyed=","doc":null,"summary":null,"abstract":false,"args":[{"name":"destroyed","doc":null,"default_value":"","external_name":"destroyed","restriction":""}],"args_string":"(destroyed)","args_html":"(destroyed)","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":27,"url":null},"def":{"name":"destroyed=","args":[{"name":"destroyed","doc":null,"default_value":"","external_name":"destroyed","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@destroyed = destroyed"}},{"id":"destroyed?-instance-method","html_id":"destroyed?-instance-method","name":"destroyed?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":29,"url":null},"def":{"name":"destroyed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"destroyed"}},{"id":"new_record?-instance-method","html_id":"new_record?-instance-method","name":"new_record?","doc":"Id generated on save or set on load","summary":"<p>Id generated on save or set on load</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":14,"url":null},"def":{"name":"new_record?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if destroyed?\n  false\nelse\n  id_local = @id\n  (_new_flag || id_local.nil?) || id_local.try(&.empty?)\nend"}},{"id":"persisted?-instance-method","html_id":"persisted?-instance-method","name":"persisted?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":23,"url":null},"def":{"name":"persisted?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!(new_record? || destroyed?)"}},{"id":"reload!-instance-method","html_id":"reload!-instance-method","name":"reload!","doc":"Reload the model in place.\n\nRaises\n- `RethinkORM::Error::DocumentNotSaved` if document was not previously persisted\n- `RethinkORM::Error::DocumentNotFound` if document fails to load","summary":"<p>Reload the model in place.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":159,"url":null},"def":{"name":"reload!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if persisted?\nelse\n  raise(RethinkORM::Error::DocumentNotSaved.new(\"Cannot reload unpersisted document\"))\nend\nfound = self.class.table_query(&.get(self.id))\nif found.raw.nil?\n  raise(RethinkORM::Error::DocumentNotFound.new(\"Key not present: #{id}\"))\nend\nassign_attributes_from_trusted_json(found.to_json)\nclear_changes_information\nreset_associations\nself\n"}},{"id":"save(**options)-instance-method","html_id":"save(**options)-instance-method","name":"save","doc":"Saves the model.\n\nIf the model is new, a record gets created in the database, otherwise\nthe existing record gets updated.","summary":"<p>Saves the model.</p>","abstract":false,"args":[],"args_string":"(**options)","args_html":"(**options)","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":74,"url":null},"def":{"name":"save","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  save!(**options)\n  true\nrescue RethinkORM::Error\n  false\nend"}},{"id":"save!(**options)-instance-method","html_id":"save!(**options)-instance-method","name":"save!","doc":"Saves the model.\n\nIf the model is new, a record gets created in the database, otherwise\nthe existing record gets updated.\n\nRaises\n- `RethinkORM::Error:DocumentNotSaved` if was document was destroyed before save\n- `RethinkORM::Error:DocumentNotSaved` if was document was not saved by RethinkDB\n- `RethinkORM::Error:DocumentInvalid` on validation failures","summary":"<p>Saves the model.</p>","abstract":false,"args":[],"args_string":"(**options)","args_html":"(**options)","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":90,"url":null},"def":{"name":"save!","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if destroyed?\n  raise(RethinkORM::Error::DocumentNotSaved.new(\"Cannot save a destroyed document!\"))\nend\nnew_record? ? __create(**options) : __update(**options)\n"}},{"id":"update(**attributes)-instance-method","html_id":"update(**attributes)-instance-method","name":"update","doc":"Updates the model\n\nNon-atomic updates are required for multidocument updates","summary":"<p>Updates the model</p>","abstract":false,"args":[],"args_string":"(**attributes)","args_html":"(**attributes)","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":98,"url":null},"def":{"name":"update","args":[],"double_splat":{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  update!(**attributes)\n  true\nrescue RethinkORM::Error\n  false\nend"}},{"id":"update!(**attributes)-instance-method","html_id":"update!(**attributes)-instance-method","name":"update!","doc":"Updates the model in place\n\nRaises `RethinkORM::Error::DocumentInvalid` on update failure","summary":"<p>Updates the model in place</p>","abstract":false,"args":[],"args_string":"(**attributes)","args_html":"(**attributes)","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":108,"url":null},"def":{"name":"update!","args":[],"double_splat":{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"assign_attributes(**attributes)\nsave!\n"}},{"id":"update_fields(**attributes)-instance-method","html_id":"update_fields(**attributes)-instance-method","name":"update_fields","doc":"Atomically update specified fields, without running callbacks\n","summary":"<p>Atomically update specified fields, without running callbacks </p>","abstract":false,"args":[],"args_string":"(**attributes)","args_html":"(**attributes)","location":{"filename":"src/rethinkdb-orm/persistence.cr","line_number":115,"url":null},"def":{"name":"update_fields","args":[],"double_splat":{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if new_record?\n  raise(RethinkORM::Error::DocumentNotSaved.new(\"Cannot update fields of a new document!\"))\nend\nassign_attributes(**attributes)\nupdate_body = subset_json(attributes.keys)\nresponse = Connection.raw_json(update_body) do |q, doc|\n  ((q.table(@@table_name)).get(@id)).update(doc)\nend\nreplaced = response[\"replaced\"]?.try(&.as_i?) || 0\nupdated = response[\"updated\"]?.try(&.as_i?) || 0\nif replaced > 0 || updated > 0\n  clear_changes_information\nend\nself\n"}}],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Queries","path":"RethinkORM/Queries.html","kind":"module","full_name":"RethinkORM::Queries","name":"Queries","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/rethinkdb-orm/queries.cr","line_number":7,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"rethinkdb-orm/RethinkORM/Queries/HasChanges","path":"RethinkORM/Queries/HasChanges.html","kind":"alias","full_name":"RethinkORM::Queries::HasChanges","name":"HasChanges","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/rethinkdb-orm/queries.cr","line_number":9,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":true,"aliased":"RethinkDB::Term+","aliased_html":"RethinkDB::Term","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Queries/R","path":"RethinkORM/Queries/R.html","kind":"alias","full_name":"RethinkORM::Queries::R","name":"R","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/rethinkdb-orm/queries.cr","line_number":8,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":true,"aliased":"RethinkDB","aliased_html":"<a href=\"../../RethinkDB.html\">RethinkDB</a>","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Queries","kind":"module","full_name":"RethinkORM::Queries","name":"Queries"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"rethinkdb-orm/RethinkORM/Settings","path":"RethinkORM/Settings.html","kind":"module","full_name":"RethinkORM::Settings","name":"Settings","abstract":false,"superclass":null,"ancestors":[{"html_id":"rethinkdb-orm/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"rethinkdb-orm/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"locations":[{"filename":"src/rethinkdb-orm/settings.cr","line_number":4,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: host : String = ENV[\"RETHINKDB_HOST\"]? || \"localhost\", example: nil, validation: nil}, {decl: port : Int32 = (ENV[\"RETHINKDB_PORT\"]? || 28015).to_i, example: nil, validation: nil}, {decl: db : String = (ENV[\"RETHINKDB_DB\"]? || ENV[\"RETHINKDB_DATABASE\"]?) || \"test\", example: nil, validation: nil}, {decl: user : String = ENV[\"RETHINKDB_USER\"]? || \"admin\", example: nil, validation: nil}, {decl: password : String = ENV[\"RETHINKDB_PASSWORD\"]? || \"\", example: nil, validation: nil}, {decl: retry_interval : Time::Span = (ENV[\"RETHINKDB_TIMEOUT\"]? || 2).to_i.seconds, example: nil, validation: nil}, {decl: retry_attempts : Int32 = ENV[\"RETHINKDB_RETRIES\"]?.try(&.to_i) || 10, example: nil, validation: nil}, {decl: query_retries : Int32 = ENV[\"RETHINKDB_QUERY_RETRIES\"]?.try(&.to_i) || 10, example: nil, validation: nil}, {decl: lock_expire : Time::Span = (ENV[\"RETHINKDB_LOCK_EXPIRE\"]? || 30).to_i.seconds, example: nil, validation: nil}, {decl: lock_timeout : Time::Span = (ENV[\"RETHINKDB_LOCK_TIMEOUT\"]? || 5).to_i.seconds, example: nil, validation: nil}] of Nil","doc":null,"summary":null}],"included_modules":[{"html_id":"rethinkdb-orm/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"rethinkdb-orm/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/rethinkdb-orm/settings.cr","line_number":5,"url":null},"def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/settings.cr","line_number":5,"url":null},"def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"HabitatSettings"}}],"constructors":[],"instance_methods":[{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/rethinkdb-orm/settings.cr","line_number":5,"url":null},"def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"HabitatSettings"}}],"macros":[],"types":[{"html_id":"rethinkdb-orm/RethinkORM/Settings/HabitatSettings","path":"RethinkORM/Settings/HabitatSettings.html","kind":"class","full_name":"RethinkORM::Settings::HabitatSettings","name":"HabitatSettings","abstract":false,"superclass":{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rethinkdb-orm/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rethinkdb-orm/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/rethinkdb-orm/settings.cr","line_number":5,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM/Settings","kind":"module","full_name":"RethinkORM::Settings","name":"Settings"},"doc":null,"summary":null,"class_methods":[{"id":"db:String-class-method","html_id":"db:String-class-method","name":"db","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"db","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@@db.not_nil!"}},{"id":"db=(value:String)-class-method","html_id":"db=(value:String)-class-method","name":"db=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","location":null,"def":{"name":"db=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@db = value"}},{"id":"db?-class-method","html_id":"db?-class-method","name":"db?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use db in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use db in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"db?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@db"}},{"id":"host:String-class-method","html_id":"host:String-class-method","name":"host","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"host","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@@host.not_nil!"}},{"id":"host=(value:String)-class-method","html_id":"host=(value:String)-class-method","name":"host=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","location":null,"def":{"name":"host=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@host = value"}},{"id":"host?-class-method","html_id":"host?-class-method","name":"host?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use host in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use host in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"host?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@host"}},{"id":"lock_expire:Time::Span-class-method","html_id":"lock_expire:Time::Span-class-method","name":"lock_expire","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Time::Span","args_html":" : Time::Span","location":null,"def":{"name":"lock_expire","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span","visibility":"Public","body":"@@lock_expire.not_nil!"}},{"id":"lock_expire=(value:Time::Span)-class-method","html_id":"lock_expire=(value:Time::Span)-class-method","name":"lock_expire=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time::Span"}],"args_string":"(value : Time::Span)","args_html":"(value : Time::Span)","location":null,"def":{"name":"lock_expire=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@lock_expire = value"}},{"id":"lock_expire?-class-method","html_id":"lock_expire?-class-method","name":"lock_expire?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use lock_expire in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use lock_expire in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"lock_expire?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@lock_expire"}},{"id":"lock_timeout:Time::Span-class-method","html_id":"lock_timeout:Time::Span-class-method","name":"lock_timeout","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Time::Span","args_html":" : Time::Span","location":null,"def":{"name":"lock_timeout","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span","visibility":"Public","body":"@@lock_timeout.not_nil!"}},{"id":"lock_timeout=(value:Time::Span)-class-method","html_id":"lock_timeout=(value:Time::Span)-class-method","name":"lock_timeout=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time::Span"}],"args_string":"(value : Time::Span)","args_html":"(value : Time::Span)","location":null,"def":{"name":"lock_timeout=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@lock_timeout = value"}},{"id":"lock_timeout?-class-method","html_id":"lock_timeout?-class-method","name":"lock_timeout?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use lock_timeout in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use lock_timeout in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"lock_timeout?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@lock_timeout"}},{"id":"password:String-class-method","html_id":"password:String-class-method","name":"password","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"password","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@@password.not_nil!"}},{"id":"password=(value:String)-class-method","html_id":"password=(value:String)-class-method","name":"password=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","location":null,"def":{"name":"password=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@password = value"}},{"id":"password?-class-method","html_id":"password?-class-method","name":"password?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use password in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use password in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"password?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@password"}},{"id":"port:Int32-class-method","html_id":"port:Int32-class-method","name":"port","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":null,"def":{"name":"port","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@@port.not_nil!"}},{"id":"port=(value:Int32)-class-method","html_id":"port=(value:Int32)-class-method","name":"port=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","location":null,"def":{"name":"port=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@port = value"}},{"id":"port?-class-method","html_id":"port?-class-method","name":"port?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use port in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use port in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"port?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@port"}},{"id":"query_retries:Int32-class-method","html_id":"query_retries:Int32-class-method","name":"query_retries","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":null,"def":{"name":"query_retries","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@@query_retries.not_nil!"}},{"id":"query_retries=(value:Int32)-class-method","html_id":"query_retries=(value:Int32)-class-method","name":"query_retries=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","location":null,"def":{"name":"query_retries=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@query_retries = value"}},{"id":"query_retries?-class-method","html_id":"query_retries?-class-method","name":"query_retries?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use query_retries in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use query_retries in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"query_retries?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@query_retries"}},{"id":"retry_attempts:Int32-class-method","html_id":"retry_attempts:Int32-class-method","name":"retry_attempts","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":null,"def":{"name":"retry_attempts","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@@retry_attempts.not_nil!"}},{"id":"retry_attempts=(value:Int32)-class-method","html_id":"retry_attempts=(value:Int32)-class-method","name":"retry_attempts=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","location":null,"def":{"name":"retry_attempts=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@retry_attempts = value"}},{"id":"retry_attempts?-class-method","html_id":"retry_attempts?-class-method","name":"retry_attempts?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use retry_attempts in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use retry_attempts in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"retry_attempts?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@retry_attempts"}},{"id":"retry_interval:Time::Span-class-method","html_id":"retry_interval:Time::Span-class-method","name":"retry_interval","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Time::Span","args_html":" : Time::Span","location":null,"def":{"name":"retry_interval","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span","visibility":"Public","body":"@@retry_interval.not_nil!"}},{"id":"retry_interval=(value:Time::Span)-class-method","html_id":"retry_interval=(value:Time::Span)-class-method","name":"retry_interval=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time::Span"}],"args_string":"(value : Time::Span)","args_html":"(value : Time::Span)","location":null,"def":{"name":"retry_interval=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@retry_interval = value"}},{"id":"retry_interval?-class-method","html_id":"retry_interval?-class-method","name":"retry_interval?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use retry_interval in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use retry_interval in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"retry_interval?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@retry_interval"}},{"id":"to_h-class-method","html_id":"to_h-class-method","name":"to_h","doc":"Generates a hash using the provided values","summary":"<p>Generates a hash using the provided values</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"to_h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{\"host\" => host, \"port\" => port, \"db\" => db, \"user\" => user, \"password\" => password, \"retry_interval\" => retry_interval, \"retry_attempts\" => retry_attempts, \"query_retries\" => query_retries, \"lock_expire\" => lock_expire, \"lock_timeout\" => lock_timeout}"}},{"id":"user:String-class-method","html_id":"user:String-class-method","name":"user","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"user","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@@user.not_nil!"}},{"id":"user=(value:String)-class-method","html_id":"user=(value:String)-class-method","name":"user=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","location":null,"def":{"name":"user=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@user = value"}},{"id":"user?-class-method","html_id":"user?-class-method","name":"user?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use user in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use user in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"user?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@user"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"rethinkdb-orm/RethinkORM/Table","path":"RethinkORM/Table.html","kind":"module","full_name":"RethinkORM::Table","name":"Table","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/rethinkdb-orm/table.cr","line_number":1,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"__process_table__-macro","html_id":"__process_table__-macro","name":"__process_table__","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","location":{"filename":"src/rethinkdb-orm/table.cr","line_number":22,"url":null},"def":{"name":"__process_table__","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if RethinkORM::Base::TABLES.includes?(TABLE_NAME[:name]) %}{% else %}\n      {% RethinkORM::Base::TABLES << TABLE_NAME[:name] %}\n    {% end %}\n\n\n    @@table_name : String = \n{{ TABLE_NAME[:name] }}\n\n\n    def self.table_name\n      @@table_name\n    \nend\n\n    def table_name\n      @@table_name\n    \nend\n  \n"}},{"id":"table(name)-macro","html_id":"table(name)-macro","name":"table","doc":"Macro to manually set the table name of the model","summary":"<p>Macro to manually set the table name of the model</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","location":{"filename":"src/rethinkdb-orm/table.cr","line_number":18,"url":null},"def":{"name":"table","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% TABLE_NAME[:name] = name.id.stringify %}\n\n  \n"}}],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Timestamps","path":"RethinkORM/Timestamps.html","kind":"module","full_name":"RethinkORM::Timestamps","name":"Timestamps","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/rethinkdb-orm/timestamps.cr","line_number":7,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":"Creates created_at and updated_at attributes.\n- `updated_at` is set through the `before_update` callback\n- `created_at` is set through the `before_update` callback\n","summary":"<p>Creates created_at and updated_at attributes.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rethinkdb-orm/RethinkORM/Validators","path":"RethinkORM/Validators.html","kind":"module","full_name":"RethinkORM::Validators","name":"Validators","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/rethinkdb-orm/validators/unique.cr","line_number":1,"url":null}],"repository_name":"rethinkdb-orm","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"rethinkdb-orm/RethinkORM/Base","kind":"class","full_name":"RethinkORM::Base","name":"Base"}],"namespace":{"html_id":"rethinkdb-orm/RethinkORM","kind":"module","full_name":"RethinkORM","name":"RethinkORM"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"ensure_unique(field,scope=[]ofNil,create_index=true,callback=nil,&transform)-macro","html_id":"ensure_unique(field,scope=[]ofNil,create_index=true,callback=nil,&amp;transform)-macro","name":"ensure_unique","doc":"In case of transformations on field, allow user defined transform","summary":"<p>In case of transformations on field, allow user defined transform</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""},{"name":"scope","doc":null,"default_value":"[] of Nil","external_name":"scope","restriction":""},{"name":"create_index","doc":null,"default_value":"true","external_name":"create_index","restriction":""},{"name":"callback","doc":null,"default_value":"nil","external_name":"callback","restriction":""}],"args_string":"(field, scope = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Nil</span>, create_index = <span class=\"n\">true</span>, callback = <span class=\"n\">nil</span>, &transform)","location":{"filename":"src/rethinkdb-orm/validators/unique.cr","line_number":3,"url":null},"def":{"name":"ensure_unique","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""},{"name":"scope","doc":null,"default_value":"[] of Nil","external_name":"scope","restriction":""},{"name":"create_index","doc":null,"default_value":"true","external_name":"create_index","restriction":""},{"name":"callback","doc":null,"default_value":"nil","external_name":"callback","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"transform","doc":null,"default_value":"","external_name":"transform","restriction":""},"visibility":"Public","body":"      \n{% if create_index %}\n        secondary_index({{ field }})\n      {% end %}\n\n\n      validate \"#{ \n{{ field }}\n } should be unique\", ->(this: self) do\n        \n{% if scope.empty? %}\n          {% scope = [field] %}\n          {% proc_return_type = (FIELDS[field.id][:klass].union_types.reject(&.==(Nil)).join('|')).id %}\n        {% else %}\n          {% proc_return_type = \"Tuple(#{(scope.map do |s|\n  (FIELDS[s.id][:klass].union_types.reject(&.==(Nil)).join('|')).id\nend.join(\", \")).id})\".id %}\n        {% end %}\n\n\n        \n# Return if any values are nil\n\n        \n{% for s in scope %}\n          return true if this.{{ s.id }}.nil?\n        {% end %}\n\n\n        \n# Construct proc type fron scope array (forgive me mother, for I have sinned)\n\n        \n# Arguments are not-nillable as nil status is checked above.\n\n        \n{% proc_arg_type = \"#{(scope.map do |s|\n  (FIELDS[s.id][:klass].union_types.reject(&.==(Nil)).join('|')).id\nend.join(\", \")).id}\".id %}\n\n        \n{% signature = \"#{(scope.map do |s|\n  \"#{s.id}: #{(FIELDS[s.id][:klass].union_types.reject(&.==(Nil)).join('|')).id}\"\nend.join(\", \")).id}\".id %}\n\n\n        \n# Handle Transformation block/callback\n\n        \n{% if transform %}\n          # Construct a proc from a given block, call with argument.\n          transform_proc : Proc({{ proc_arg_type }}, {{ proc_return_type }}) = ->({{ signature.id }}) { {{ transform.body }} }\n\n          result : {{ proc_return_type }} = transform_proc.call(\n          {% for s in scope %}this.{{ s.id }}.not_nil!,{% end %}\n          )\n        {% else %}{% if callback %}\n          result : {{ proc_return_type }} = this.{{ callback.id }}(\n            {% for s in scope %}this.{{ s.id }}.not_nil!,{% end %}\n          )\n        {% else %}\n\n          {% if scope.size == 1 %}\n            # No transform\n            result = {\n              {% for s in scope %}this.{{ s.id }},{% end %}\n            }\n          {% else %}\n            result = {{ scope.first.id }}\n          {% end %}\n        {% end %}{% end %}\n\n\n        \n# Fetch Document\n\n        \n{% if scope.size == 1 %}\n          # Utilise generated secondary index\n          {% if create_index %}\n            doc = self.find_all([result], index: {{ field.id.stringify }}).first?\n          {% else %}\n            doc = self.where({{ field.id }}: result).first?\n          {% end %}\n        {% else %}\n          # Where query with all scoped fields\n          doc = self.where(\n            {% for s, index in scope %}{{ s.id }}: result[{{ index.id }}], {% end %}\n          ).first?\n        {% end %}\n\n\n        \n# Fields are not present in another document under present table\n\n        success = !(doc && doc.id != this.id)\n        \n{% if transform || callback %}\n          # Set fields in unique scope with result of transform block if document is unique\n          if success && !this.persisted?\n            {% if scope.size == 1 %}\n              this.{{ field.id }} = result\n            {% else %}\n              {% for s, index in scope %}\n                this.{{ s.id }} = result[{{ index.id }}]\n              {% end %}\n            {% end %}\n          end\n        {% end %}\n\n\n        success\n      \nend\n    \n"}}],"types":[]}]}]}})